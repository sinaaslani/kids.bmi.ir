//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(GreetingCard))]
    [KnownType(typeof(KidsUser))]
    public partial class Kids_Greetings: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long KidsGreetingId
        {
            get { return _kidsGreetingId; }
            set
            {
                if (_kidsGreetingId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'KidsGreetingId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _kidsGreetingId = value;
                    OnPropertyChanged("KidsGreetingId");
                }
            }
        }
        private long _kidsGreetingId;
    
        [DataMember]
        public Nullable<long> KidsUserId
        {
            get { return _kidsUserId; }
            set
            {
                if (_kidsUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("KidsUserId", _kidsUserId);
                    if (!IsDeserializing)
                    {
                        if (KidsUser != null && KidsUser.KidsUserId != value)
                        {
                            KidsUser = null;
                        }
                    }
                    _kidsUserId = value;
                    OnPropertyChanged("KidsUserId");
                }
            }
        }
        private Nullable<long> _kidsUserId;
    
        [DataMember]
        public Nullable<int> CardId
        {
            get { return _cardId; }
            set
            {
                if (_cardId != value)
                {
                    ChangeTracker.RecordOriginalValue("CardId", _cardId);
                    if (!IsDeserializing)
                    {
                        if (GreetingCard != null && GreetingCard.CardId != value)
                        {
                            GreetingCard = null;
                        }
                    }
                    _cardId = value;
                    OnPropertyChanged("CardId");
                }
            }
        }
        private Nullable<int> _cardId;
    
        [DataMember]
        public string DestinationEmailAddress
        {
            get { return _destinationEmailAddress; }
            set
            {
                if (_destinationEmailAddress != value)
                {
                    _destinationEmailAddress = value;
                    OnPropertyChanged("DestinationEmailAddress");
                }
            }
        }
        private string _destinationEmailAddress;
    
        [DataMember]
        public Nullable<System.DateTime> CreateDateTime
        {
            get { return _createDateTime; }
            set
            {
                if (_createDateTime != value)
                {
                    _createDateTime = value;
                    OnPropertyChanged("CreateDateTime");
                }
            }
        }
        private Nullable<System.DateTime> _createDateTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public GreetingCard GreetingCard
        {
            get { return _greetingCard; }
            set
            {
                if (!ReferenceEquals(_greetingCard, value))
                {
                    var previousValue = _greetingCard;
                    _greetingCard = value;
                    FixupGreetingCard(previousValue);
                    OnNavigationPropertyChanged("GreetingCard");
                }
            }
        }
        private GreetingCard _greetingCard;
    
        [DataMember]
        public KidsUser KidsUser
        {
            get { return _kidsUser; }
            set
            {
                if (!ReferenceEquals(_kidsUser, value))
                {
                    var previousValue = _kidsUser;
                    _kidsUser = value;
                    FixupKidsUser(previousValue);
                    OnNavigationPropertyChanged("KidsUser");
                }
            }
        }
        private KidsUser _kidsUser;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            GreetingCard = null;
            KidsUser = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupGreetingCard(GreetingCard previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Kids_Greetings.Contains(this))
            {
                previousValue.Kids_Greetings.Remove(this);
            }
    
            if (GreetingCard != null)
            {
                if (!GreetingCard.Kids_Greetings.Contains(this))
                {
                    GreetingCard.Kids_Greetings.Add(this);
                }
    
                CardId = GreetingCard.CardId;
            }
            else if (!skipKeys)
            {
                CardId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("GreetingCard")
                    && (ChangeTracker.OriginalValues["GreetingCard"] == GreetingCard))
                {
                    ChangeTracker.OriginalValues.Remove("GreetingCard");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("GreetingCard", previousValue);
                }
                if (GreetingCard != null && !GreetingCard.ChangeTracker.ChangeTrackingEnabled)
                {
                    GreetingCard.StartTracking();
                }
            }
        }
    
        private void FixupKidsUser(KidsUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Kids_Greetings.Contains(this))
            {
                previousValue.Kids_Greetings.Remove(this);
            }
    
            if (KidsUser != null)
            {
                if (!KidsUser.Kids_Greetings.Contains(this))
                {
                    KidsUser.Kids_Greetings.Add(this);
                }
    
                KidsUserId = KidsUser.KidsUserId;
            }
            else if (!skipKeys)
            {
                KidsUserId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("KidsUser")
                    && (ChangeTracker.OriginalValues["KidsUser"] == KidsUser))
                {
                    ChangeTracker.OriginalValues.Remove("KidsUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("KidsUser", previousValue);
                }
                if (KidsUser != null && !KidsUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    KidsUser.StartTracking();
                }
            }
        }

        #endregion
    }
}

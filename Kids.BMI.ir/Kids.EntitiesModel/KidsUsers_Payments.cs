//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(KidsUser))]
    public partial class KidsUsers_Payments: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long PaymentId
        {
            get { return _paymentId; }
            set
            {
                if (_paymentId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PaymentId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _paymentId = value;
                    OnPropertyChanged("PaymentId");
                }
            }
        }
        private long _paymentId;
    
        [DataMember]
        public long KidsUserId
        {
            get { return _kidsUserId; }
            set
            {
                if (_kidsUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("KidsUserId", _kidsUserId);
                    if (!IsDeserializing)
                    {
                        if (KidsUser != null && KidsUser.KidsUserId != value)
                        {
                            KidsUser = null;
                        }
                    }
                    _kidsUserId = value;
                    OnPropertyChanged("KidsUserId");
                }
            }
        }
        private long _kidsUserId;
    
        [DataMember]
        public string RetrivalRefNo
        {
            get { return _retrivalRefNo; }
            set
            {
                if (_retrivalRefNo != value)
                {
                    _retrivalRefNo = value;
                    OnPropertyChanged("RetrivalRefNo");
                }
            }
        }
        private string _retrivalRefNo;
    
        [DataMember]
        public string CustomerCardNo
        {
            get { return _customerCardNo; }
            set
            {
                if (_customerCardNo != value)
                {
                    _customerCardNo = value;
                    OnPropertyChanged("CustomerCardNo");
                }
            }
        }
        private string _customerCardNo;
    
        [DataMember]
        public Nullable<long> SystemTraceNo
        {
            get { return _systemTraceNo; }
            set
            {
                if (_systemTraceNo != value)
                {
                    _systemTraceNo = value;
                    OnPropertyChanged("SystemTraceNo");
                }
            }
        }
        private Nullable<long> _systemTraceNo;
    
        [DataMember]
        public long OrderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId != value)
                {
                    _orderId = value;
                    OnPropertyChanged("OrderId");
                }
            }
        }
        private long _orderId;
    
        [DataMember]
        public long Amount
        {
            get { return _amount; }
            set
            {
                if (_amount != value)
                {
                    _amount = value;
                    OnPropertyChanged("Amount");
                }
            }
        }
        private long _amount;
    
        [DataMember]
        public Nullable<int> AppStatusCode
        {
            get { return _appStatusCode; }
            set
            {
                if (_appStatusCode != value)
                {
                    _appStatusCode = value;
                    OnPropertyChanged("AppStatusCode");
                }
            }
        }
        private Nullable<int> _appStatusCode;
    
        [DataMember]
        public string AppStatusDescription
        {
            get { return _appStatusDescription; }
            set
            {
                if (_appStatusDescription != value)
                {
                    _appStatusDescription = value;
                    OnPropertyChanged("AppStatusDescription");
                }
            }
        }
        private string _appStatusDescription;
    
        [DataMember]
        public string RequestKey
        {
            get { return _requestKey; }
            set
            {
                if (_requestKey != value)
                {
                    _requestKey = value;
                    OnPropertyChanged("RequestKey");
                }
            }
        }
        private string _requestKey;
    
        [DataMember]
        public string UserIPAddress
        {
            get { return _userIPAddress; }
            set
            {
                if (_userIPAddress != value)
                {
                    _userIPAddress = value;
                    OnPropertyChanged("UserIPAddress");
                }
            }
        }
        private string _userIPAddress;
    
        [DataMember]
        public System.DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set
            {
                if (_createDateTime != value)
                {
                    _createDateTime = value;
                    OnPropertyChanged("CreateDateTime");
                }
            }
        }
        private System.DateTime _createDateTime;
    
        [DataMember]
        public Nullable<System.DateTime> LastUpdateDateTime
        {
            get { return _lastUpdateDateTime; }
            set
            {
                if (_lastUpdateDateTime != value)
                {
                    _lastUpdateDateTime = value;
                    OnPropertyChanged("LastUpdateDateTime");
                }
            }
        }
        private Nullable<System.DateTime> _lastUpdateDateTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public KidsUser KidsUser
        {
            get { return _kidsUser; }
            set
            {
                if (!ReferenceEquals(_kidsUser, value))
                {
                    var previousValue = _kidsUser;
                    _kidsUser = value;
                    FixupKidsUser(previousValue);
                    OnNavigationPropertyChanged("KidsUser");
                }
            }
        }
        private KidsUser _kidsUser;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            KidsUser = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupKidsUser(KidsUser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KidsUsers_Payments.Contains(this))
            {
                previousValue.KidsUsers_Payments.Remove(this);
            }
    
            if (KidsUser != null)
            {
                if (!KidsUser.KidsUsers_Payments.Contains(this))
                {
                    KidsUser.KidsUsers_Payments.Add(this);
                }
    
                KidsUserId = KidsUser.KidsUserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("KidsUser")
                    && (ChangeTracker.OriginalValues["KidsUser"] == KidsUser))
                {
                    ChangeTracker.OriginalValues.Remove("KidsUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("KidsUser", previousValue);
                }
                if (KidsUser != null && !KidsUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    KidsUser.StartTracking();
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(QuestionnaireForm_Questions))]
    [KnownType(typeof(QuestionnaireForm_UserResponses))]
    public partial class QuestionnaireForms_ResponseItems: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long ItemId
        {
            get { return _itemId; }
            set
            {
                if (_itemId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ItemId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _itemId = value;
                    OnPropertyChanged("ItemId");
                }
            }
        }
        private long _itemId;
    
        [DataMember]
        public long QuestionsId
        {
            get { return _questionsId; }
            set
            {
                if (_questionsId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuestionsId", _questionsId);
                    if (!IsDeserializing)
                    {
                        if (QuestionnaireForm_Questions != null && QuestionnaireForm_Questions.QuestionId != value)
                        {
                            QuestionnaireForm_Questions = null;
                        }
                    }
                    _questionsId = value;
                    OnPropertyChanged("QuestionsId");
                }
            }
        }
        private long _questionsId;
    
        [DataMember]
        public string ItemText
        {
            get { return _itemText; }
            set
            {
                if (_itemText != value)
                {
                    _itemText = value;
                    OnPropertyChanged("ItemText");
                }
            }
        }
        private string _itemText;
    
        [DataMember]
        public string ItemValue
        {
            get { return _itemValue; }
            set
            {
                if (_itemValue != value)
                {
                    _itemValue = value;
                    OnPropertyChanged("ItemValue");
                }
            }
        }
        private string _itemValue;
    
        [DataMember]
        public bool HasInputText
        {
            get { return _hasInputText; }
            set
            {
                if (_hasInputText != value)
                {
                    _hasInputText = value;
                    OnPropertyChanged("HasInputText");
                }
            }
        }
        private bool _hasInputText;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public QuestionnaireForm_Questions QuestionnaireForm_Questions
        {
            get { return _questionnaireForm_Questions; }
            set
            {
                if (!ReferenceEquals(_questionnaireForm_Questions, value))
                {
                    var previousValue = _questionnaireForm_Questions;
                    _questionnaireForm_Questions = value;
                    FixupQuestionnaireForm_Questions(previousValue);
                    OnNavigationPropertyChanged("QuestionnaireForm_Questions");
                }
            }
        }
        private QuestionnaireForm_Questions _questionnaireForm_Questions;
    
        [DataMember]
        public TrackableCollection<QuestionnaireForm_UserResponses> QuestionnaireForm_UserResponses
        {
            get
            {
                if (_questionnaireForm_UserResponses == null)
                {
                    _questionnaireForm_UserResponses = new TrackableCollection<QuestionnaireForm_UserResponses>();
                    _questionnaireForm_UserResponses.CollectionChanged += FixupQuestionnaireForm_UserResponses;
                }
                return _questionnaireForm_UserResponses;
            }
            set
            {
                if (!ReferenceEquals(_questionnaireForm_UserResponses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_questionnaireForm_UserResponses != null)
                    {
                        _questionnaireForm_UserResponses.CollectionChanged -= FixupQuestionnaireForm_UserResponses;
                    }
                    _questionnaireForm_UserResponses = value;
                    if (_questionnaireForm_UserResponses != null)
                    {
                        _questionnaireForm_UserResponses.CollectionChanged += FixupQuestionnaireForm_UserResponses;
                    }
                    OnNavigationPropertyChanged("QuestionnaireForm_UserResponses");
                }
            }
        }
        private TrackableCollection<QuestionnaireForm_UserResponses> _questionnaireForm_UserResponses;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            QuestionnaireForm_Questions = null;
            QuestionnaireForm_UserResponses.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupQuestionnaireForm_Questions(QuestionnaireForm_Questions previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.QuestionnaireForms_ResponseItems.Contains(this))
            {
                previousValue.QuestionnaireForms_ResponseItems.Remove(this);
            }
    
            if (QuestionnaireForm_Questions != null)
            {
                if (!QuestionnaireForm_Questions.QuestionnaireForms_ResponseItems.Contains(this))
                {
                    QuestionnaireForm_Questions.QuestionnaireForms_ResponseItems.Add(this);
                }
    
                QuestionsId = QuestionnaireForm_Questions.QuestionId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("QuestionnaireForm_Questions")
                    && (ChangeTracker.OriginalValues["QuestionnaireForm_Questions"] == QuestionnaireForm_Questions))
                {
                    ChangeTracker.OriginalValues.Remove("QuestionnaireForm_Questions");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("QuestionnaireForm_Questions", previousValue);
                }
                if (QuestionnaireForm_Questions != null && !QuestionnaireForm_Questions.ChangeTracker.ChangeTrackingEnabled)
                {
                    QuestionnaireForm_Questions.StartTracking();
                }
            }
        }
    
        private void FixupQuestionnaireForm_UserResponses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (QuestionnaireForm_UserResponses item in e.NewItems)
                {
                    item.QuestionnaireForms_ResponseItems = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("QuestionnaireForm_UserResponses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (QuestionnaireForm_UserResponses item in e.OldItems)
                {
                    if (ReferenceEquals(item.QuestionnaireForms_ResponseItems, this))
                    {
                        item.QuestionnaireForms_ResponseItems = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("QuestionnaireForm_UserResponses", item);
                    }
                }
            }
        }

        #endregion
    }
}

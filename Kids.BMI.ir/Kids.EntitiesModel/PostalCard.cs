//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ScoreType))]
    public partial class PostalCard: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CardId
        {
            get { return _cardId; }
            set
            {
                if (_cardId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CardId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cardId = value;
                    OnPropertyChanged("CardId");
                }
            }
        }
        private int _cardId;
    
        [DataMember]
        public string CardName
        {
            get { return _cardName; }
            set
            {
                if (_cardName != value)
                {
                    _cardName = value;
                    OnPropertyChanged("CardName");
                }
            }
        }
        private string _cardName;
    
        [DataMember]
        public double CardScore
        {
            get { return _cardScore; }
            set
            {
                if (_cardScore != value)
                {
                    _cardScore = value;
                    OnPropertyChanged("CardScore");
                }
            }
        }
        private double _cardScore;
    
        [DataMember]
        public int CardScoreTypeId
        {
            get { return _cardScoreTypeId; }
            set
            {
                if (_cardScoreTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("CardScoreTypeId", _cardScoreTypeId);
                    if (!IsDeserializing)
                    {
                        if (ScoreType != null && ScoreType.Id != value)
                        {
                            ScoreType = null;
                        }
                    }
                    _cardScoreTypeId = value;
                    OnPropertyChanged("CardScoreTypeId");
                }
            }
        }
        private int _cardScoreTypeId;
    
        [DataMember]
        public string CardPostalSmallPic
        {
            get { return _cardPostalSmallPic; }
            set
            {
                if (_cardPostalSmallPic != value)
                {
                    _cardPostalSmallPic = value;
                    OnPropertyChanged("CardPostalSmallPic");
                }
            }
        }
        private string _cardPostalSmallPic;
    
        [DataMember]
        public string CardPostalPic
        {
            get { return _cardPostalPic; }
            set
            {
                if (_cardPostalPic != value)
                {
                    _cardPostalPic = value;
                    OnPropertyChanged("CardPostalPic");
                }
            }
        }
        private string _cardPostalPic;
    
        [DataMember]
        public string CardPostalDescription
        {
            get { return _cardPostalDescription; }
            set
            {
                if (_cardPostalDescription != value)
                {
                    _cardPostalDescription = value;
                    OnPropertyChanged("CardPostalDescription");
                }
            }
        }
        private string _cardPostalDescription;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public ScoreType ScoreType
        {
            get { return _scoreType; }
            set
            {
                if (!ReferenceEquals(_scoreType, value))
                {
                    var previousValue = _scoreType;
                    _scoreType = value;
                    FixupScoreType(previousValue);
                    OnNavigationPropertyChanged("ScoreType");
                }
            }
        }
        private ScoreType _scoreType;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ScoreType = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupScoreType(ScoreType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PostalCards.Contains(this))
            {
                previousValue.PostalCards.Remove(this);
            }
    
            if (ScoreType != null)
            {
                if (!ScoreType.PostalCards.Contains(this))
                {
                    ScoreType.PostalCards.Add(this);
                }
    
                CardScoreTypeId = ScoreType.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ScoreType")
                    && (ChangeTracker.OriginalValues["ScoreType"] == ScoreType))
                {
                    ChangeTracker.OriginalValues.Remove("ScoreType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ScoreType", previousValue);
                }
                if (ScoreType != null && !ScoreType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ScoreType.StartTracking();
                }
            }
        }

        #endregion
    }
}

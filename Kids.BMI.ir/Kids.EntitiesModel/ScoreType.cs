//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ScoreTypeCategory))]
    [KnownType(typeof(PostalCard))]
    [KnownType(typeof(Game))]
    public partial class ScoreType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int CategoryId
        {
            get { return _categoryId; }
            set
            {
                if (_categoryId != value)
                {
                    ChangeTracker.RecordOriginalValue("CategoryId", _categoryId);
                    if (!IsDeserializing)
                    {
                        if (ScoreTypeCategory != null && ScoreTypeCategory.CategoryId != value)
                        {
                            ScoreTypeCategory = null;
                        }
                    }
                    _categoryId = value;
                    OnPropertyChanged("CategoryId");
                }
            }
        }
        private int _categoryId;
    
        [DataMember]
        public string ScoreFaName
        {
            get { return _scoreFaName; }
            set
            {
                if (_scoreFaName != value)
                {
                    _scoreFaName = value;
                    OnPropertyChanged("ScoreFaName");
                }
            }
        }
        private string _scoreFaName;
    
        [DataMember]
        public string ScoreEnName
        {
            get { return _scoreEnName; }
            set
            {
                if (_scoreEnName != value)
                {
                    _scoreEnName = value;
                    OnPropertyChanged("ScoreEnName");
                }
            }
        }
        private string _scoreEnName;
    
        [DataMember]
        public double CoefficentValue
        {
            get { return _coefficentValue; }
            set
            {
                if (_coefficentValue != value)
                {
                    _coefficentValue = value;
                    OnPropertyChanged("CoefficentValue");
                }
            }
        }
        private double _coefficentValue;
    
        [DataMember]
        public int MaxPerMonth
        {
            get { return _maxPerMonth; }
            set
            {
                if (_maxPerMonth != value)
                {
                    _maxPerMonth = value;
                    OnPropertyChanged("MaxPerMonth");
                }
            }
        }
        private int _maxPerMonth;
    
        [DataMember]
        public int MaxPerDay
        {
            get { return _maxPerDay; }
            set
            {
                if (_maxPerDay != value)
                {
                    _maxPerDay = value;
                    OnPropertyChanged("MaxPerDay");
                }
            }
        }
        private int _maxPerDay;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsRangeBaseScore
        {
            get { return _isRangeBaseScore; }
            set
            {
                if (_isRangeBaseScore != value)
                {
                    _isRangeBaseScore = value;
                    OnPropertyChanged("IsRangeBaseScore");
                }
            }
        }
        private bool _isRangeBaseScore;
    
        [DataMember]
        public string RangeDefinition
        {
            get { return _rangeDefinition; }
            set
            {
                if (_rangeDefinition != value)
                {
                    _rangeDefinition = value;
                    OnPropertyChanged("RangeDefinition");
                }
            }
        }
        private string _rangeDefinition;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public ScoreTypeCategory ScoreTypeCategory
        {
            get { return _scoreTypeCategory; }
            set
            {
                if (!ReferenceEquals(_scoreTypeCategory, value))
                {
                    var previousValue = _scoreTypeCategory;
                    _scoreTypeCategory = value;
                    FixupScoreTypeCategory(previousValue);
                    OnNavigationPropertyChanged("ScoreTypeCategory");
                }
            }
        }
        private ScoreTypeCategory _scoreTypeCategory;
    
        [DataMember]
        public TrackableCollection<PostalCard> PostalCards
        {
            get
            {
                if (_postalCards == null)
                {
                    _postalCards = new TrackableCollection<PostalCard>();
                    _postalCards.CollectionChanged += FixupPostalCards;
                }
                return _postalCards;
            }
            set
            {
                if (!ReferenceEquals(_postalCards, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_postalCards != null)
                    {
                        _postalCards.CollectionChanged -= FixupPostalCards;
                    }
                    _postalCards = value;
                    if (_postalCards != null)
                    {
                        _postalCards.CollectionChanged += FixupPostalCards;
                    }
                    OnNavigationPropertyChanged("PostalCards");
                }
            }
        }
        private TrackableCollection<PostalCard> _postalCards;
    
        [DataMember]
        public TrackableCollection<Game> Games
        {
            get
            {
                if (_games == null)
                {
                    _games = new TrackableCollection<Game>();
                    _games.CollectionChanged += FixupGames;
                }
                return _games;
            }
            set
            {
                if (!ReferenceEquals(_games, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_games != null)
                    {
                        _games.CollectionChanged -= FixupGames;
                    }
                    _games = value;
                    if (_games != null)
                    {
                        _games.CollectionChanged += FixupGames;
                    }
                    OnNavigationPropertyChanged("Games");
                }
            }
        }
        private TrackableCollection<Game> _games;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ScoreTypeCategory = null;
            PostalCards.Clear();
            Games.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupScoreTypeCategory(ScoreTypeCategory previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ScoreTypes.Contains(this))
            {
                previousValue.ScoreTypes.Remove(this);
            }
    
            if (ScoreTypeCategory != null)
            {
                if (!ScoreTypeCategory.ScoreTypes.Contains(this))
                {
                    ScoreTypeCategory.ScoreTypes.Add(this);
                }
    
                CategoryId = ScoreTypeCategory.CategoryId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ScoreTypeCategory")
                    && (ChangeTracker.OriginalValues["ScoreTypeCategory"] == ScoreTypeCategory))
                {
                    ChangeTracker.OriginalValues.Remove("ScoreTypeCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ScoreTypeCategory", previousValue);
                }
                if (ScoreTypeCategory != null && !ScoreTypeCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    ScoreTypeCategory.StartTracking();
                }
            }
        }
    
        private void FixupPostalCards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PostalCard item in e.NewItems)
                {
                    item.ScoreType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PostalCards", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PostalCard item in e.OldItems)
                {
                    if (ReferenceEquals(item.ScoreType, this))
                    {
                        item.ScoreType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PostalCards", item);
                    }
                }
            }
        }
    
        private void FixupGames(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Game item in e.NewItems)
                {
                    if (!item.ScoreTypes.Contains(this))
                    {
                        item.ScoreTypes.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Games", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Game item in e.OldItems)
                {
                    if (item.ScoreTypes.Contains(this))
                    {
                        item.ScoreTypes.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Games", item);
                    }
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Kids_Greetings))]
    [KnownType(typeof(Kids_Scores))]
    [KnownType(typeof(Kids_Wishes))]
    [KnownType(typeof(ParentRelation))]
    [KnownType(typeof(KidsUser))]
    [KnownType(typeof(KidsUser_BankStoryExam))]
    [KnownType(typeof(KidsUserState))]
    [KnownType(typeof(KidsUsers_Payments))]
    [KnownType(typeof(PollUserResponse))]
    [KnownType(typeof(Festival_Pictures))]
    public partial class KidsUser: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long KidsUserId
        {
            get { return _kidsUserId; }
            set
            {
                if (_kidsUserId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'KidsUserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _kidsUserId = value;
                    OnPropertyChanged("KidsUserId");
                }
            }
        }
        private long _kidsUserId;
    
        [DataMember]
        public string SSOUserName
        {
            get { return _sSOUserName; }
            set
            {
                if (_sSOUserName != value)
                {
                    _sSOUserName = value;
                    OnPropertyChanged("SSOUserName");
                }
            }
        }
        private string _sSOUserName;
    
        [DataMember]
        public string ChildPic
        {
            get { return _childPic; }
            set
            {
                if (_childPic != value)
                {
                    _childPic = value;
                    OnPropertyChanged("ChildPic");
                }
            }
        }
        private string _childPic;
    
        [DataMember]
        public string ChildIdentityPic
        {
            get { return _childIdentityPic; }
            set
            {
                if (_childIdentityPic != value)
                {
                    _childIdentityPic = value;
                    OnPropertyChanged("ChildIdentityPic");
                }
            }
        }
        private string _childIdentityPic;
    
        [DataMember]
        public string ChildNationalCardFaceUPPic
        {
            get { return _childNationalCardFaceUPPic; }
            set
            {
                if (_childNationalCardFaceUPPic != value)
                {
                    _childNationalCardFaceUPPic = value;
                    OnPropertyChanged("ChildNationalCardFaceUPPic");
                }
            }
        }
        private string _childNationalCardFaceUPPic;
    
        [DataMember]
        public string ChildNationalCardFaceDownPic
        {
            get { return _childNationalCardFaceDownPic; }
            set
            {
                if (_childNationalCardFaceDownPic != value)
                {
                    _childNationalCardFaceDownPic = value;
                    OnPropertyChanged("ChildNationalCardFaceDownPic");
                }
            }
        }
        private string _childNationalCardFaceDownPic;
    
        [DataMember]
        public string ChildName
        {
            get { return _childName; }
            set
            {
                if (_childName != value)
                {
                    _childName = value;
                    OnPropertyChanged("ChildName");
                }
            }
        }
        private string _childName;
    
        [DataMember]
        public string ChildFamily
        {
            get { return _childFamily; }
            set
            {
                if (_childFamily != value)
                {
                    _childFamily = value;
                    OnPropertyChanged("ChildFamily");
                }
            }
        }
        private string _childFamily;
    
        [DataMember]
        public string ChildFatherName
        {
            get { return _childFatherName; }
            set
            {
                if (_childFatherName != value)
                {
                    _childFatherName = value;
                    OnPropertyChanged("ChildFatherName");
                }
            }
        }
        private string _childFatherName;
    
        [DataMember]
        public bool ChildSex
        {
            get { return _childSex; }
            set
            {
                if (_childSex != value)
                {
                    _childSex = value;
                    OnPropertyChanged("ChildSex");
                }
            }
        }
        private bool _childSex;
    
        [DataMember]
        public string ChildMelliCode
        {
            get { return _childMelliCode; }
            set
            {
                if (_childMelliCode != value)
                {
                    _childMelliCode = value;
                    OnPropertyChanged("ChildMelliCode");
                }
            }
        }
        private string _childMelliCode;
    
        [DataMember]
        public string ChildIdentityNo
        {
            get { return _childIdentityNo; }
            set
            {
                if (_childIdentityNo != value)
                {
                    _childIdentityNo = value;
                    OnPropertyChanged("ChildIdentityNo");
                }
            }
        }
        private string _childIdentityNo;
    
        [DataMember]
        public string ChildIdentitySerial
        {
            get { return _childIdentitySerial; }
            set
            {
                if (_childIdentitySerial != value)
                {
                    _childIdentitySerial = value;
                    OnPropertyChanged("ChildIdentitySerial");
                }
            }
        }
        private string _childIdentitySerial;
    
        [DataMember]
        public string ChildBirthLocation
        {
            get { return _childBirthLocation; }
            set
            {
                if (_childBirthLocation != value)
                {
                    _childBirthLocation = value;
                    OnPropertyChanged("ChildBirthLocation");
                }
            }
        }
        private string _childBirthLocation;
    
        [DataMember]
        public System.DateTime ChildBirthDate
        {
            get { return _childBirthDate; }
            set
            {
                if (_childBirthDate != value)
                {
                    _childBirthDate = value;
                    OnPropertyChanged("ChildBirthDate");
                }
            }
        }
        private System.DateTime _childBirthDate;
    
        [DataMember]
        public Nullable<decimal> ChildAge
        {
            get { return _childAge; }
            set
            {
                if (_childAge != value)
                {
                    _childAge = value;
                    OnPropertyChanged("ChildAge");
                }
            }
        }
        private Nullable<decimal> _childAge;
    
        [DataMember]
        public string ChildMobileNumber
        {
            get { return _childMobileNumber; }
            set
            {
                if (_childMobileNumber != value)
                {
                    _childMobileNumber = value;
                    OnPropertyChanged("ChildMobileNumber");
                }
            }
        }
        private string _childMobileNumber;
    
        [DataMember]
        public string ChildPhoneNumber
        {
            get { return _childPhoneNumber; }
            set
            {
                if (_childPhoneNumber != value)
                {
                    _childPhoneNumber = value;
                    OnPropertyChanged("ChildPhoneNumber");
                }
            }
        }
        private string _childPhoneNumber;
    
        [DataMember]
        public string ChildEmailAddress
        {
            get { return _childEmailAddress; }
            set
            {
                if (_childEmailAddress != value)
                {
                    _childEmailAddress = value;
                    OnPropertyChanged("ChildEmailAddress");
                }
            }
        }
        private string _childEmailAddress;
    
        [DataMember]
        public string ChildPostCode
        {
            get { return _childPostCode; }
            set
            {
                if (_childPostCode != value)
                {
                    _childPostCode = value;
                    OnPropertyChanged("ChildPostCode");
                }
            }
        }
        private string _childPostCode;
    
        [DataMember]
        public string ChildPostAddress
        {
            get { return _childPostAddress; }
            set
            {
                if (_childPostAddress != value)
                {
                    _childPostAddress = value;
                    OnPropertyChanged("ChildPostAddress");
                }
            }
        }
        private string _childPostAddress;
    
        [DataMember]
        public int ParentRelationId
        {
            get { return _parentRelationId; }
            set
            {
                if (_parentRelationId != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentRelationId", _parentRelationId);
                    if (!IsDeserializing)
                    {
                        if (ParentRelation != null && ParentRelation.ParentRelationId != value)
                        {
                            ParentRelation = null;
                        }
                    }
                    _parentRelationId = value;
                    OnPropertyChanged("ParentRelationId");
                }
            }
        }
        private int _parentRelationId;
    
        [DataMember]
        public string ParentName
        {
            get { return _parentName; }
            set
            {
                if (_parentName != value)
                {
                    _parentName = value;
                    OnPropertyChanged("ParentName");
                }
            }
        }
        private string _parentName;
    
        [DataMember]
        public string ParentFamily
        {
            get { return _parentFamily; }
            set
            {
                if (_parentFamily != value)
                {
                    _parentFamily = value;
                    OnPropertyChanged("ParentFamily");
                }
            }
        }
        private string _parentFamily;
    
        [DataMember]
        public string ParentIdentityNo
        {
            get { return _parentIdentityNo; }
            set
            {
                if (_parentIdentityNo != value)
                {
                    _parentIdentityNo = value;
                    OnPropertyChanged("ParentIdentityNo");
                }
            }
        }
        private string _parentIdentityNo;
    
        [DataMember]
        public string ParentMelliCode
        {
            get { return _parentMelliCode; }
            set
            {
                if (_parentMelliCode != value)
                {
                    _parentMelliCode = value;
                    OnPropertyChanged("ParentMelliCode");
                }
            }
        }
        private string _parentMelliCode;
    
        [DataMember]
        public string ParentMobileNumber
        {
            get { return _parentMobileNumber; }
            set
            {
                if (_parentMobileNumber != value)
                {
                    _parentMobileNumber = value;
                    OnPropertyChanged("ParentMobileNumber");
                }
            }
        }
        private string _parentMobileNumber;
    
        [DataMember]
        public string ParentPhoneNumber
        {
            get { return _parentPhoneNumber; }
            set
            {
                if (_parentPhoneNumber != value)
                {
                    _parentPhoneNumber = value;
                    OnPropertyChanged("ParentPhoneNumber");
                }
            }
        }
        private string _parentPhoneNumber;
    
        [DataMember]
        public string ParentEmailAddress
        {
            get { return _parentEmailAddress; }
            set
            {
                if (_parentEmailAddress != value)
                {
                    _parentEmailAddress = value;
                    OnPropertyChanged("ParentEmailAddress");
                }
            }
        }
        private string _parentEmailAddress;
    
        [DataMember]
        public string ParentPostCode
        {
            get { return _parentPostCode; }
            set
            {
                if (_parentPostCode != value)
                {
                    _parentPostCode = value;
                    OnPropertyChanged("ParentPostCode");
                }
            }
        }
        private string _parentPostCode;
    
        [DataMember]
        public string ParentPostAddress
        {
            get { return _parentPostAddress; }
            set
            {
                if (_parentPostAddress != value)
                {
                    _parentPostAddress = value;
                    OnPropertyChanged("ParentPostAddress");
                }
            }
        }
        private string _parentPostAddress;
    
        [DataMember]
        public string ChildAccNo
        {
            get { return _childAccNo; }
            set
            {
                if (_childAccNo != value)
                {
                    _childAccNo = value;
                    OnPropertyChanged("ChildAccNo");
                }
            }
        }
        private string _childAccNo;
    
        [DataMember]
        public string ChildCustomerNo
        {
            get { return _childCustomerNo; }
            set
            {
                if (_childCustomerNo != value)
                {
                    _childCustomerNo = value;
                    OnPropertyChanged("ChildCustomerNo");
                }
            }
        }
        private string _childCustomerNo;
    
        [DataMember]
        public string ParentAccNo
        {
            get { return _parentAccNo; }
            set
            {
                if (_parentAccNo != value)
                {
                    _parentAccNo = value;
                    OnPropertyChanged("ParentAccNo");
                }
            }
        }
        private string _parentAccNo;
    
        [DataMember]
        public string ParentCustomerNo
        {
            get { return _parentCustomerNo; }
            set
            {
                if (_parentCustomerNo != value)
                {
                    _parentCustomerNo = value;
                    OnPropertyChanged("ParentCustomerNo");
                }
            }
        }
        private string _parentCustomerNo;
    
        [DataMember]
        public int CurrentStatus
        {
            get { return _currentStatus; }
            set
            {
                if (_currentStatus != value)
                {
                    ChangeTracker.RecordOriginalValue("CurrentStatus", _currentStatus);
                    if (!IsDeserializing)
                    {
                        if (KidsUserState != null && KidsUserState.Id != value)
                        {
                            KidsUserState = null;
                        }
                    }
                    _currentStatus = value;
                    OnPropertyChanged("CurrentStatus");
                }
            }
        }
        private int _currentStatus;
    
        [DataMember]
        public string StatusHistory
        {
            get { return _statusHistory; }
            set
            {
                if (_statusHistory != value)
                {
                    _statusHistory = value;
                    OnPropertyChanged("StatusHistory");
                }
            }
        }
        private string _statusHistory;
    
        [DataMember]
        public System.DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set
            {
                if (_createDateTime != value)
                {
                    _createDateTime = value;
                    OnPropertyChanged("CreateDateTime");
                }
            }
        }
        private System.DateTime _createDateTime;
    
        [DataMember]
        public Nullable<System.DateTime> LastUpdateDateTime
        {
            get { return _lastUpdateDateTime; }
            set
            {
                if (_lastUpdateDateTime != value)
                {
                    _lastUpdateDateTime = value;
                    OnPropertyChanged("LastUpdateDateTime");
                }
            }
        }
        private Nullable<System.DateTime> _lastUpdateDateTime;
    
        [DataMember]
        public Nullable<long> IntruducerId
        {
            get { return _intruducerId; }
            set
            {
                if (_intruducerId != value)
                {
                    ChangeTracker.RecordOriginalValue("IntruducerId", _intruducerId);
                    if (!IsDeserializing)
                    {
                        if (IntroducerUser != null && IntroducerUser.KidsUserId != value)
                        {
                            IntroducerUser = null;
                        }
                    }
                    _intruducerId = value;
                    OnPropertyChanged("IntruducerId");
                }
            }
        }
        private Nullable<long> _intruducerId;
    
        [DataMember]
        public bool ChildPicIsPublic
        {
            get { return _childPicIsPublic; }
            set
            {
                if (_childPicIsPublic != value)
                {
                    _childPicIsPublic = value;
                    OnPropertyChanged("ChildPicIsPublic");
                }
            }
        }
        private bool _childPicIsPublic;
    
        [DataMember]
        public Nullable<double> LastCalculatedScore
        {
            get { return _lastCalculatedScore; }
            set
            {
                if (_lastCalculatedScore != value)
                {
                    _lastCalculatedScore = value;
                    OnPropertyChanged("LastCalculatedScore");
                }
            }
        }
        private Nullable<double> _lastCalculatedScore;
    
        [DataMember]
        public Nullable<int> ChildAccBranchNo
        {
            get { return _childAccBranchNo; }
            set
            {
                if (_childAccBranchNo != value)
                {
                    _childAccBranchNo = value;
                    OnPropertyChanged("ChildAccBranchNo");
                }
            }
        }
        private Nullable<int> _childAccBranchNo;
    
        [DataMember]
        public string ChildPersianBirthDay
        {
            get { return _childPersianBirthDay; }
            set
            {
                if (_childPersianBirthDay != value)
                {
                    _childPersianBirthDay = value;
                    OnPropertyChanged("ChildPersianBirthDay");
                }
            }
        }
        private string _childPersianBirthDay;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Kids_Greetings> Kids_Greetings
        {
            get
            {
                if (_kids_Greetings == null)
                {
                    _kids_Greetings = new TrackableCollection<Kids_Greetings>();
                    _kids_Greetings.CollectionChanged += FixupKids_Greetings;
                }
                return _kids_Greetings;
            }
            set
            {
                if (!ReferenceEquals(_kids_Greetings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kids_Greetings != null)
                    {
                        _kids_Greetings.CollectionChanged -= FixupKids_Greetings;
                    }
                    _kids_Greetings = value;
                    if (_kids_Greetings != null)
                    {
                        _kids_Greetings.CollectionChanged += FixupKids_Greetings;
                    }
                    OnNavigationPropertyChanged("Kids_Greetings");
                }
            }
        }
        private TrackableCollection<Kids_Greetings> _kids_Greetings;
    
        [DataMember]
        public TrackableCollection<Kids_Scores> Kids_Scores
        {
            get
            {
                if (_kids_Scores == null)
                {
                    _kids_Scores = new TrackableCollection<Kids_Scores>();
                    _kids_Scores.CollectionChanged += FixupKids_Scores;
                }
                return _kids_Scores;
            }
            set
            {
                if (!ReferenceEquals(_kids_Scores, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kids_Scores != null)
                    {
                        _kids_Scores.CollectionChanged -= FixupKids_Scores;
                    }
                    _kids_Scores = value;
                    if (_kids_Scores != null)
                    {
                        _kids_Scores.CollectionChanged += FixupKids_Scores;
                    }
                    OnNavigationPropertyChanged("Kids_Scores");
                }
            }
        }
        private TrackableCollection<Kids_Scores> _kids_Scores;
    
        [DataMember]
        public TrackableCollection<Kids_Wishes> Kids_Wishes
        {
            get
            {
                if (_kids_Wishes == null)
                {
                    _kids_Wishes = new TrackableCollection<Kids_Wishes>();
                    _kids_Wishes.CollectionChanged += FixupKids_Wishes;
                }
                return _kids_Wishes;
            }
            set
            {
                if (!ReferenceEquals(_kids_Wishes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kids_Wishes != null)
                    {
                        _kids_Wishes.CollectionChanged -= FixupKids_Wishes;
                    }
                    _kids_Wishes = value;
                    if (_kids_Wishes != null)
                    {
                        _kids_Wishes.CollectionChanged += FixupKids_Wishes;
                    }
                    OnNavigationPropertyChanged("Kids_Wishes");
                }
            }
        }
        private TrackableCollection<Kids_Wishes> _kids_Wishes;
    
        [DataMember]
        public ParentRelation ParentRelation
        {
            get { return _parentRelation; }
            set
            {
                if (!ReferenceEquals(_parentRelation, value))
                {
                    var previousValue = _parentRelation;
                    _parentRelation = value;
                    FixupParentRelation(previousValue);
                    OnNavigationPropertyChanged("ParentRelation");
                }
            }
        }
        private ParentRelation _parentRelation;
    
        [DataMember]
        public KidsUser IntroducerUser
        {
            get { return _introducerUser; }
            set
            {
                if (!ReferenceEquals(_introducerUser, value))
                {
                    var previousValue = _introducerUser;
                    _introducerUser = value;
                    FixupIntroducerUser(previousValue);
                    OnNavigationPropertyChanged("IntroducerUser");
                }
            }
        }
        private KidsUser _introducerUser;
    
        [DataMember]
        public TrackableCollection<KidsUser_BankStoryExam> KidsUser_BankStoryExam
        {
            get
            {
                if (_kidsUser_BankStoryExam == null)
                {
                    _kidsUser_BankStoryExam = new TrackableCollection<KidsUser_BankStoryExam>();
                    _kidsUser_BankStoryExam.CollectionChanged += FixupKidsUser_BankStoryExam;
                }
                return _kidsUser_BankStoryExam;
            }
            set
            {
                if (!ReferenceEquals(_kidsUser_BankStoryExam, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kidsUser_BankStoryExam != null)
                    {
                        _kidsUser_BankStoryExam.CollectionChanged -= FixupKidsUser_BankStoryExam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (KidsUser_BankStoryExam item in _kidsUser_BankStoryExam)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _kidsUser_BankStoryExam = value;
                    if (_kidsUser_BankStoryExam != null)
                    {
                        _kidsUser_BankStoryExam.CollectionChanged += FixupKidsUser_BankStoryExam;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (KidsUser_BankStoryExam item in _kidsUser_BankStoryExam)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("KidsUser_BankStoryExam");
                }
            }
        }
        private TrackableCollection<KidsUser_BankStoryExam> _kidsUser_BankStoryExam;
    
        [DataMember]
        public KidsUserState KidsUserState
        {
            get { return _kidsUserState; }
            set
            {
                if (!ReferenceEquals(_kidsUserState, value))
                {
                    var previousValue = _kidsUserState;
                    _kidsUserState = value;
                    FixupKidsUserState(previousValue);
                    OnNavigationPropertyChanged("KidsUserState");
                }
            }
        }
        private KidsUserState _kidsUserState;
    
        [DataMember]
        public TrackableCollection<KidsUsers_Payments> KidsUsers_Payments
        {
            get
            {
                if (_kidsUsers_Payments == null)
                {
                    _kidsUsers_Payments = new TrackableCollection<KidsUsers_Payments>();
                    _kidsUsers_Payments.CollectionChanged += FixupKidsUsers_Payments;
                }
                return _kidsUsers_Payments;
            }
            set
            {
                if (!ReferenceEquals(_kidsUsers_Payments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kidsUsers_Payments != null)
                    {
                        _kidsUsers_Payments.CollectionChanged -= FixupKidsUsers_Payments;
                    }
                    _kidsUsers_Payments = value;
                    if (_kidsUsers_Payments != null)
                    {
                        _kidsUsers_Payments.CollectionChanged += FixupKidsUsers_Payments;
                    }
                    OnNavigationPropertyChanged("KidsUsers_Payments");
                }
            }
        }
        private TrackableCollection<KidsUsers_Payments> _kidsUsers_Payments;
    
        [DataMember]
        public TrackableCollection<PollUserResponse> PollUserResponses
        {
            get
            {
                if (_pollUserResponses == null)
                {
                    _pollUserResponses = new TrackableCollection<PollUserResponse>();
                    _pollUserResponses.CollectionChanged += FixupPollUserResponses;
                }
                return _pollUserResponses;
            }
            set
            {
                if (!ReferenceEquals(_pollUserResponses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pollUserResponses != null)
                    {
                        _pollUserResponses.CollectionChanged -= FixupPollUserResponses;
                    }
                    _pollUserResponses = value;
                    if (_pollUserResponses != null)
                    {
                        _pollUserResponses.CollectionChanged += FixupPollUserResponses;
                    }
                    OnNavigationPropertyChanged("PollUserResponses");
                }
            }
        }
        private TrackableCollection<PollUserResponse> _pollUserResponses;
    
        [DataMember]
        public TrackableCollection<Festival_Pictures> Festival_Pictures
        {
            get
            {
                if (_festival_Pictures == null)
                {
                    _festival_Pictures = new TrackableCollection<Festival_Pictures>();
                    _festival_Pictures.CollectionChanged += FixupFestival_Pictures;
                }
                return _festival_Pictures;
            }
            set
            {
                if (!ReferenceEquals(_festival_Pictures, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_festival_Pictures != null)
                    {
                        _festival_Pictures.CollectionChanged -= FixupFestival_Pictures;
                    }
                    _festival_Pictures = value;
                    if (_festival_Pictures != null)
                    {
                        _festival_Pictures.CollectionChanged += FixupFestival_Pictures;
                    }
                    OnNavigationPropertyChanged("Festival_Pictures");
                }
            }
        }
        private TrackableCollection<Festival_Pictures> _festival_Pictures;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Kids_Greetings.Clear();
            Kids_Scores.Clear();
            Kids_Wishes.Clear();
            ParentRelation = null;
            IntroducerUser = null;
            KidsUser_BankStoryExam.Clear();
            KidsUserState = null;
            KidsUsers_Payments.Clear();
            PollUserResponses.Clear();
            Festival_Pictures.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupParentRelation(ParentRelation previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ParentRelation != null)
            {
                ParentRelationId = ParentRelation.ParentRelationId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentRelation")
                    && (ChangeTracker.OriginalValues["ParentRelation"] == ParentRelation))
                {
                    ChangeTracker.OriginalValues.Remove("ParentRelation");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentRelation", previousValue);
                }
                if (ParentRelation != null && !ParentRelation.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentRelation.StartTracking();
                }
            }
        }
    
        private void FixupIntroducerUser(KidsUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (IntroducerUser != null)
            {
                IntruducerId = IntroducerUser.KidsUserId;
            }
    
            else if (!skipKeys)
            {
                IntruducerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("IntroducerUser")
                    && (ChangeTracker.OriginalValues["IntroducerUser"] == IntroducerUser))
                {
                    ChangeTracker.OriginalValues.Remove("IntroducerUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("IntroducerUser", previousValue);
                }
                if (IntroducerUser != null && !IntroducerUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    IntroducerUser.StartTracking();
                }
            }
        }
    
        private void FixupKidsUserState(KidsUserState previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KidsUsers.Contains(this))
            {
                previousValue.KidsUsers.Remove(this);
            }
    
            if (KidsUserState != null)
            {
                if (!KidsUserState.KidsUsers.Contains(this))
                {
                    KidsUserState.KidsUsers.Add(this);
                }
    
                CurrentStatus = KidsUserState.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("KidsUserState")
                    && (ChangeTracker.OriginalValues["KidsUserState"] == KidsUserState))
                {
                    ChangeTracker.OriginalValues.Remove("KidsUserState");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("KidsUserState", previousValue);
                }
                if (KidsUserState != null && !KidsUserState.ChangeTracker.ChangeTrackingEnabled)
                {
                    KidsUserState.StartTracking();
                }
            }
        }
    
        private void FixupKids_Greetings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Kids_Greetings item in e.NewItems)
                {
                    item.KidsUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Kids_Greetings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Kids_Greetings item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUser, this))
                    {
                        item.KidsUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Kids_Greetings", item);
                    }
                }
            }
        }
    
        private void FixupKids_Scores(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Kids_Scores item in e.NewItems)
                {
                    item.KidsUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Kids_Scores", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Kids_Scores item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUser, this))
                    {
                        item.KidsUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Kids_Scores", item);
                    }
                }
            }
        }
    
        private void FixupKids_Wishes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Kids_Wishes item in e.NewItems)
                {
                    item.KidsUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Kids_Wishes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Kids_Wishes item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUser, this))
                    {
                        item.KidsUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Kids_Wishes", item);
                    }
                }
            }
        }
    
        private void FixupKidsUser_BankStoryExam(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KidsUser_BankStoryExam item in e.NewItems)
                {
                    item.KidsUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KidsUser_BankStoryExam", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KidsUser_BankStoryExam item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUser, this))
                    {
                        item.KidsUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KidsUser_BankStoryExam", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupKidsUsers_Payments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KidsUsers_Payments item in e.NewItems)
                {
                    item.KidsUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KidsUsers_Payments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KidsUsers_Payments item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUser, this))
                    {
                        item.KidsUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KidsUsers_Payments", item);
                    }
                }
            }
        }
    
        private void FixupPollUserResponses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PollUserResponse item in e.NewItems)
                {
                    item.KidsUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PollUserResponses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PollUserResponse item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUser, this))
                    {
                        item.KidsUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PollUserResponses", item);
                    }
                }
            }
        }
    
        private void FixupFestival_Pictures(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Festival_Pictures item in e.NewItems)
                {
                    item.KidsUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Festival_Pictures", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Festival_Pictures item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUser, this))
                    {
                        item.KidsUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Festival_Pictures", item);
                    }
                }
            }
        }

        #endregion
    }
}

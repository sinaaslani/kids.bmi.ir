//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(NewsCategory))]
    public partial class News: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long NewsId
        {
            get { return _newsId; }
            set
            {
                if (_newsId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NewsId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _newsId = value;
                    OnPropertyChanged("NewsId");
                }
            }
        }
        private long _newsId;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string Summary
        {
            get { return _summary; }
            set
            {
                if (_summary != value)
                {
                    _summary = value;
                    OnPropertyChanged("Summary");
                }
            }
        }
        private string _summary;
    
        [DataMember]
        public string Body
        {
            get { return _body; }
            set
            {
                if (_body != value)
                {
                    _body = value;
                    OnPropertyChanged("Body");
                }
            }
        }
        private string _body;
    
        [DataMember]
        public string SmallPicAddress
        {
            get { return _smallPicAddress; }
            set
            {
                if (_smallPicAddress != value)
                {
                    _smallPicAddress = value;
                    OnPropertyChanged("SmallPicAddress");
                }
            }
        }
        private string _smallPicAddress;
    
        [DataMember]
        public string PicAddress
        {
            get { return _picAddress; }
            set
            {
                if (_picAddress != value)
                {
                    _picAddress = value;
                    OnPropertyChanged("PicAddress");
                }
            }
        }
        private string _picAddress;
    
        [DataMember]
        public string BodyFileAddress
        {
            get { return _bodyFileAddress; }
            set
            {
                if (_bodyFileAddress != value)
                {
                    _bodyFileAddress = value;
                    OnPropertyChanged("BodyFileAddress");
                }
            }
        }
        private string _bodyFileAddress;
    
        [DataMember]
        public string MediaFileAddress
        {
            get { return _mediaFileAddress; }
            set
            {
                if (_mediaFileAddress != value)
                {
                    _mediaFileAddress = value;
                    OnPropertyChanged("MediaFileAddress");
                }
            }
        }
        private string _mediaFileAddress;
    
        [DataMember]
        public string RealFileAddress
        {
            get { return _realFileAddress; }
            set
            {
                if (_realFileAddress != value)
                {
                    _realFileAddress = value;
                    OnPropertyChanged("RealFileAddress");
                }
            }
        }
        private string _realFileAddress;
    
        [DataMember]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;
    
        [DataMember]
        public System.DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set
            {
                if (_createDateTime != value)
                {
                    _createDateTime = value;
                    OnPropertyChanged("CreateDateTime");
                }
            }
        }
        private System.DateTime _createDateTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<NewsCategory> NewsCategories
        {
            get
            {
                if (_newsCategories == null)
                {
                    _newsCategories = new TrackableCollection<NewsCategory>();
                    _newsCategories.CollectionChanged += FixupNewsCategories;
                }
                return _newsCategories;
            }
            set
            {
                if (!ReferenceEquals(_newsCategories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_newsCategories != null)
                    {
                        _newsCategories.CollectionChanged -= FixupNewsCategories;
                    }
                    _newsCategories = value;
                    if (_newsCategories != null)
                    {
                        _newsCategories.CollectionChanged += FixupNewsCategories;
                    }
                    OnNavigationPropertyChanged("NewsCategories");
                }
            }
        }
        private TrackableCollection<NewsCategory> _newsCategories;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            NewsCategories.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupNewsCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NewsCategory item in e.NewItems)
                {
                    if (!item.News.Contains(this))
                    {
                        item.News.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NewsCategories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NewsCategory item in e.OldItems)
                {
                    if (item.News.Contains(this))
                    {
                        item.News.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NewsCategories", item);
                    }
                }
            }
        }

        #endregion
    }
}

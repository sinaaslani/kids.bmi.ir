//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(QuestionnaireForm))]
    [KnownType(typeof(QuestionnaireForm_UserResponses))]
    [KnownType(typeof(QuestionnaireForms_ResponseItems))]
    public partial class QuestionnaireForm_Questions: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long QuestionId
        {
            get { return _questionId; }
            set
            {
                if (_questionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'QuestionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _questionId = value;
                    OnPropertyChanged("QuestionId");
                }
            }
        }
        private long _questionId;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public long FormId
        {
            get { return _formId; }
            set
            {
                if (_formId != value)
                {
                    ChangeTracker.RecordOriginalValue("FormId", _formId);
                    if (!IsDeserializing)
                    {
                        if (QuestionnaireForm != null && QuestionnaireForm.FormId != value)
                        {
                            QuestionnaireForm = null;
                        }
                    }
                    _formId = value;
                    OnPropertyChanged("FormId");
                }
            }
        }
        private long _formId;
    
        [DataMember]
        public int Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        private int _type;
    
        [DataMember]
        public int ItemsType
        {
            get { return _itemsType; }
            set
            {
                if (_itemsType != value)
                {
                    _itemsType = value;
                    OnPropertyChanged("ItemsType");
                }
            }
        }
        private int _itemsType;
    
        [DataMember]
        public bool Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private bool _status;
    
        [DataMember]
        public bool UsersCanViewResult
        {
            get { return _usersCanViewResult; }
            set
            {
                if (_usersCanViewResult != value)
                {
                    _usersCanViewResult = value;
                    OnPropertyChanged("UsersCanViewResult");
                }
            }
        }
        private bool _usersCanViewResult;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public QuestionnaireForm QuestionnaireForm
        {
            get { return _questionnaireForm; }
            set
            {
                if (!ReferenceEquals(_questionnaireForm, value))
                {
                    var previousValue = _questionnaireForm;
                    _questionnaireForm = value;
                    FixupQuestionnaireForm(previousValue);
                    OnNavigationPropertyChanged("QuestionnaireForm");
                }
            }
        }
        private QuestionnaireForm _questionnaireForm;
    
        [DataMember]
        public TrackableCollection<QuestionnaireForm_UserResponses> QuestionnaireForm_UserResponses
        {
            get
            {
                if (_questionnaireForm_UserResponses == null)
                {
                    _questionnaireForm_UserResponses = new TrackableCollection<QuestionnaireForm_UserResponses>();
                    _questionnaireForm_UserResponses.CollectionChanged += FixupQuestionnaireForm_UserResponses;
                }
                return _questionnaireForm_UserResponses;
            }
            set
            {
                if (!ReferenceEquals(_questionnaireForm_UserResponses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_questionnaireForm_UserResponses != null)
                    {
                        _questionnaireForm_UserResponses.CollectionChanged -= FixupQuestionnaireForm_UserResponses;
                    }
                    _questionnaireForm_UserResponses = value;
                    if (_questionnaireForm_UserResponses != null)
                    {
                        _questionnaireForm_UserResponses.CollectionChanged += FixupQuestionnaireForm_UserResponses;
                    }
                    OnNavigationPropertyChanged("QuestionnaireForm_UserResponses");
                }
            }
        }
        private TrackableCollection<QuestionnaireForm_UserResponses> _questionnaireForm_UserResponses;
    
        [DataMember]
        public TrackableCollection<QuestionnaireForms_ResponseItems> QuestionnaireForms_ResponseItems
        {
            get
            {
                if (_questionnaireForms_ResponseItems == null)
                {
                    _questionnaireForms_ResponseItems = new TrackableCollection<QuestionnaireForms_ResponseItems>();
                    _questionnaireForms_ResponseItems.CollectionChanged += FixupQuestionnaireForms_ResponseItems;
                }
                return _questionnaireForms_ResponseItems;
            }
            set
            {
                if (!ReferenceEquals(_questionnaireForms_ResponseItems, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_questionnaireForms_ResponseItems != null)
                    {
                        _questionnaireForms_ResponseItems.CollectionChanged -= FixupQuestionnaireForms_ResponseItems;
                    }
                    _questionnaireForms_ResponseItems = value;
                    if (_questionnaireForms_ResponseItems != null)
                    {
                        _questionnaireForms_ResponseItems.CollectionChanged += FixupQuestionnaireForms_ResponseItems;
                    }
                    OnNavigationPropertyChanged("QuestionnaireForms_ResponseItems");
                }
            }
        }
        private TrackableCollection<QuestionnaireForms_ResponseItems> _questionnaireForms_ResponseItems;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            QuestionnaireForm = null;
            QuestionnaireForm_UserResponses.Clear();
            QuestionnaireForms_ResponseItems.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupQuestionnaireForm(QuestionnaireForm previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.QuestionnaireForm_Questions.Contains(this))
            {
                previousValue.QuestionnaireForm_Questions.Remove(this);
            }
    
            if (QuestionnaireForm != null)
            {
                if (!QuestionnaireForm.QuestionnaireForm_Questions.Contains(this))
                {
                    QuestionnaireForm.QuestionnaireForm_Questions.Add(this);
                }
    
                FormId = QuestionnaireForm.FormId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("QuestionnaireForm")
                    && (ChangeTracker.OriginalValues["QuestionnaireForm"] == QuestionnaireForm))
                {
                    ChangeTracker.OriginalValues.Remove("QuestionnaireForm");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("QuestionnaireForm", previousValue);
                }
                if (QuestionnaireForm != null && !QuestionnaireForm.ChangeTracker.ChangeTrackingEnabled)
                {
                    QuestionnaireForm.StartTracking();
                }
            }
        }
    
        private void FixupQuestionnaireForm_UserResponses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (QuestionnaireForm_UserResponses item in e.NewItems)
                {
                    item.QuestionnaireForm_Questions = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("QuestionnaireForm_UserResponses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (QuestionnaireForm_UserResponses item in e.OldItems)
                {
                    if (ReferenceEquals(item.QuestionnaireForm_Questions, this))
                    {
                        item.QuestionnaireForm_Questions = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("QuestionnaireForm_UserResponses", item);
                    }
                }
            }
        }
    
        private void FixupQuestionnaireForms_ResponseItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (QuestionnaireForms_ResponseItems item in e.NewItems)
                {
                    item.QuestionnaireForm_Questions = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("QuestionnaireForms_ResponseItems", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (QuestionnaireForms_ResponseItems item in e.OldItems)
                {
                    if (ReferenceEquals(item.QuestionnaireForm_Questions, this))
                    {
                        item.QuestionnaireForm_Questions = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("QuestionnaireForms_ResponseItems", item);
                    }
                }
            }
        }

        #endregion
    }
}

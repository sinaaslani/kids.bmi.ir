//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ScoreType))]
    [KnownType(typeof(BankStoryExam_Question))]
    public partial class BankStoryExam: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ExamId
        {
            get { return _examId; }
            set
            {
                if (_examId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ExamId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _examId = value;
                    OnPropertyChanged("ExamId");
                }
            }
        }
        private int _examId;
    
        [DataMember]
        public string ExamName
        {
            get { return _examName; }
            set
            {
                if (_examName != value)
                {
                    _examName = value;
                    OnPropertyChanged("ExamName");
                }
            }
        }
        private string _examName;
    
        [DataMember]
        public int DurationTime
        {
            get { return _durationTime; }
            set
            {
                if (_durationTime != value)
                {
                    _durationTime = value;
                    OnPropertyChanged("DurationTime");
                }
            }
        }
        private int _durationTime;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set
            {
                if (_createDateTime != value)
                {
                    _createDateTime = value;
                    OnPropertyChanged("CreateDateTime");
                }
            }
        }
        private System.DateTime _createDateTime;
    
        [DataMember]
        public System.DateTime IsActiveFromDate
        {
            get { return _isActiveFromDate; }
            set
            {
                if (_isActiveFromDate != value)
                {
                    _isActiveFromDate = value;
                    OnPropertyChanged("IsActiveFromDate");
                }
            }
        }
        private System.DateTime _isActiveFromDate;
    
        [DataMember]
        public System.DateTime IsActiveToDate
        {
            get { return _isActiveToDate; }
            set
            {
                if (_isActiveToDate != value)
                {
                    _isActiveToDate = value;
                    OnPropertyChanged("IsActiveToDate");
                }
            }
        }
        private System.DateTime _isActiveToDate;
    
        [DataMember]
        public int ScoreTypeId
        {
            get { return _scoreTypeId; }
            set
            {
                if (_scoreTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ScoreTypeId", _scoreTypeId);
                    if (!IsDeserializing)
                    {
                        if (ScoreType != null && ScoreType.Id != value)
                        {
                            ScoreType = null;
                        }
                    }
                    _scoreTypeId = value;
                    OnPropertyChanged("ScoreTypeId");
                }
            }
        }
        private int _scoreTypeId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public ScoreType ScoreType
        {
            get { return _scoreType; }
            set
            {
                if (!ReferenceEquals(_scoreType, value))
                {
                    var previousValue = _scoreType;
                    _scoreType = value;
                    FixupScoreType(previousValue);
                    OnNavigationPropertyChanged("ScoreType");
                }
            }
        }
        private ScoreType _scoreType;
    
        [DataMember]
        public TrackableCollection<BankStoryExam_Question> BankStoryExam_Question
        {
            get
            {
                if (_bankStoryExam_Question == null)
                {
                    _bankStoryExam_Question = new TrackableCollection<BankStoryExam_Question>();
                    _bankStoryExam_Question.CollectionChanged += FixupBankStoryExam_Question;
                }
                return _bankStoryExam_Question;
            }
            set
            {
                if (!ReferenceEquals(_bankStoryExam_Question, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bankStoryExam_Question != null)
                    {
                        _bankStoryExam_Question.CollectionChanged -= FixupBankStoryExam_Question;
                    }
                    _bankStoryExam_Question = value;
                    if (_bankStoryExam_Question != null)
                    {
                        _bankStoryExam_Question.CollectionChanged += FixupBankStoryExam_Question;
                    }
                    OnNavigationPropertyChanged("BankStoryExam_Question");
                }
            }
        }
        private TrackableCollection<BankStoryExam_Question> _bankStoryExam_Question;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ScoreType = null;
            BankStoryExam_Question.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupScoreType(ScoreType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ScoreType != null)
            {
                ScoreTypeId = ScoreType.Id;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ScoreType")
                    && (ChangeTracker.OriginalValues["ScoreType"] == ScoreType))
                {
                    ChangeTracker.OriginalValues.Remove("ScoreType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ScoreType", previousValue);
                }
                if (ScoreType != null && !ScoreType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ScoreType.StartTracking();
                }
            }
        }
    
        private void FixupBankStoryExam_Question(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BankStoryExam_Question item in e.NewItems)
                {
                    item.BankStoryExam = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BankStoryExam_Question", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BankStoryExam_Question item in e.OldItems)
                {
                    if (ReferenceEquals(item.BankStoryExam, this))
                    {
                        item.BankStoryExam = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BankStoryExam_Question", item);
                    }
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(KidsUser))]
    [KnownType(typeof(KidsUserState))]
    [KnownType(typeof(Game))]
    public partial class KidsUserState: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> NextId
        {
            get { return _nextId; }
            set
            {
                if (_nextId != value)
                {
                    ChangeTracker.RecordOriginalValue("NextId", _nextId);
                    if (!IsDeserializing)
                    {
                        if (KidsUserState2 != null && KidsUserState2.Id != value)
                        {
                            KidsUserState2 = null;
                        }
                    }
                    _nextId = value;
                    OnPropertyChanged("NextId");
                }
            }
        }
        private Nullable<int> _nextId;
    
        [DataMember]
        public string StateName
        {
            get { return _stateName; }
            set
            {
                if (_stateName != value)
                {
                    _stateName = value;
                    OnPropertyChanged("StateName");
                }
            }
        }
        private string _stateName;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<KidsUser> KidsUsers
        {
            get
            {
                if (_kidsUsers == null)
                {
                    _kidsUsers = new TrackableCollection<KidsUser>();
                    _kidsUsers.CollectionChanged += FixupKidsUsers;
                }
                return _kidsUsers;
            }
            set
            {
                if (!ReferenceEquals(_kidsUsers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kidsUsers != null)
                    {
                        _kidsUsers.CollectionChanged -= FixupKidsUsers;
                    }
                    _kidsUsers = value;
                    if (_kidsUsers != null)
                    {
                        _kidsUsers.CollectionChanged += FixupKidsUsers;
                    }
                    OnNavigationPropertyChanged("KidsUsers");
                }
            }
        }
        private TrackableCollection<KidsUser> _kidsUsers;
    
        [DataMember]
        public TrackableCollection<KidsUserState> KidsUserState1
        {
            get
            {
                if (_kidsUserState1 == null)
                {
                    _kidsUserState1 = new TrackableCollection<KidsUserState>();
                    _kidsUserState1.CollectionChanged += FixupKidsUserState1;
                }
                return _kidsUserState1;
            }
            set
            {
                if (!ReferenceEquals(_kidsUserState1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kidsUserState1 != null)
                    {
                        _kidsUserState1.CollectionChanged -= FixupKidsUserState1;
                    }
                    _kidsUserState1 = value;
                    if (_kidsUserState1 != null)
                    {
                        _kidsUserState1.CollectionChanged += FixupKidsUserState1;
                    }
                    OnNavigationPropertyChanged("KidsUserState1");
                }
            }
        }
        private TrackableCollection<KidsUserState> _kidsUserState1;
    
        [DataMember]
        public KidsUserState KidsUserState2
        {
            get { return _kidsUserState2; }
            set
            {
                if (!ReferenceEquals(_kidsUserState2, value))
                {
                    var previousValue = _kidsUserState2;
                    _kidsUserState2 = value;
                    FixupKidsUserState2(previousValue);
                    OnNavigationPropertyChanged("KidsUserState2");
                }
            }
        }
        private KidsUserState _kidsUserState2;
    
        [DataMember]
        public TrackableCollection<Game> Games
        {
            get
            {
                if (_games == null)
                {
                    _games = new TrackableCollection<Game>();
                    _games.CollectionChanged += FixupGames;
                }
                return _games;
            }
            set
            {
                if (!ReferenceEquals(_games, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_games != null)
                    {
                        _games.CollectionChanged -= FixupGames;
                    }
                    _games = value;
                    if (_games != null)
                    {
                        _games.CollectionChanged += FixupGames;
                    }
                    OnNavigationPropertyChanged("Games");
                }
            }
        }
        private TrackableCollection<Game> _games;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            KidsUsers.Clear();
            KidsUserState1.Clear();
            KidsUserState2 = null;
            Games.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupKidsUserState2(KidsUserState previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KidsUserState1.Contains(this))
            {
                previousValue.KidsUserState1.Remove(this);
            }
    
            if (KidsUserState2 != null)
            {
                if (!KidsUserState2.KidsUserState1.Contains(this))
                {
                    KidsUserState2.KidsUserState1.Add(this);
                }
    
                NextId = KidsUserState2.Id;
            }
            else if (!skipKeys)
            {
                NextId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("KidsUserState2")
                    && (ChangeTracker.OriginalValues["KidsUserState2"] == KidsUserState2))
                {
                    ChangeTracker.OriginalValues.Remove("KidsUserState2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("KidsUserState2", previousValue);
                }
                if (KidsUserState2 != null && !KidsUserState2.ChangeTracker.ChangeTrackingEnabled)
                {
                    KidsUserState2.StartTracking();
                }
            }
        }
    
        private void FixupKidsUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KidsUser item in e.NewItems)
                {
                    item.KidsUserState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KidsUsers", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KidsUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUserState, this))
                    {
                        item.KidsUserState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KidsUsers", item);
                    }
                }
            }
        }
    
        private void FixupKidsUserState1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KidsUserState item in e.NewItems)
                {
                    item.KidsUserState2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KidsUserState1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KidsUserState item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUserState2, this))
                    {
                        item.KidsUserState2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KidsUserState1", item);
                    }
                }
            }
        }
    
        private void FixupGames(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Game item in e.NewItems)
                {
                    item.KidsUserState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Games", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Game item in e.OldItems)
                {
                    if (ReferenceEquals(item.KidsUserState, this))
                    {
                        item.KidsUserState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Games", item);
                    }
                }
            }
        }

        #endregion
    }
}

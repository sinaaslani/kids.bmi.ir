//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(KidsUserState))]
    [KnownType(typeof(ScoreType))]
    public partial class Game: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int GameId
        {
            get { return _gameId; }
            set
            {
                if (_gameId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'GameId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _gameId = value;
                    OnPropertyChanged("GameId");
                }
            }
        }
        private int _gameId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsExternalGame
        {
            get { return _isExternalGame; }
            set
            {
                if (_isExternalGame != value)
                {
                    _isExternalGame = value;
                    OnPropertyChanged("IsExternalGame");
                }
            }
        }
        private bool _isExternalGame;
    
        [DataMember]
        public string FileAddress
        {
            get { return _fileAddress; }
            set
            {
                if (_fileAddress != value)
                {
                    _fileAddress = value;
                    OnPropertyChanged("FileAddress");
                }
            }
        }
        private string _fileAddress;
    
        [DataMember]
        public string ThumbnailAddress
        {
            get { return _thumbnailAddress; }
            set
            {
                if (_thumbnailAddress != value)
                {
                    _thumbnailAddress = value;
                    OnPropertyChanged("ThumbnailAddress");
                }
            }
        }
        private string _thumbnailAddress;
    
        [DataMember]
        public string GameUrl
        {
            get { return _gameUrl; }
            set
            {
                if (_gameUrl != value)
                {
                    _gameUrl = value;
                    OnPropertyChanged("GameUrl");
                }
            }
        }
        private string _gameUrl;
    
        [DataMember]
        public Nullable<int> UserStateRequired
        {
            get { return _userStateRequired; }
            set
            {
                if (_userStateRequired != value)
                {
                    ChangeTracker.RecordOriginalValue("UserStateRequired", _userStateRequired);
                    if (!IsDeserializing)
                    {
                        if (KidsUserState != null && KidsUserState.Id != value)
                        {
                            KidsUserState = null;
                        }
                    }
                    _userStateRequired = value;
                    OnPropertyChanged("UserStateRequired");
                }
            }
        }
        private Nullable<int> _userStateRequired;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public KidsUserState KidsUserState
        {
            get { return _kidsUserState; }
            set
            {
                if (!ReferenceEquals(_kidsUserState, value))
                {
                    var previousValue = _kidsUserState;
                    _kidsUserState = value;
                    FixupKidsUserState(previousValue);
                    OnNavigationPropertyChanged("KidsUserState");
                }
            }
        }
        private KidsUserState _kidsUserState;
    
        [DataMember]
        public TrackableCollection<ScoreType> ScoreTypes
        {
            get
            {
                if (_scoreTypes == null)
                {
                    _scoreTypes = new TrackableCollection<ScoreType>();
                    _scoreTypes.CollectionChanged += FixupScoreTypes;
                }
                return _scoreTypes;
            }
            set
            {
                if (!ReferenceEquals(_scoreTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_scoreTypes != null)
                    {
                        _scoreTypes.CollectionChanged -= FixupScoreTypes;
                    }
                    _scoreTypes = value;
                    if (_scoreTypes != null)
                    {
                        _scoreTypes.CollectionChanged += FixupScoreTypes;
                    }
                    OnNavigationPropertyChanged("ScoreTypes");
                }
            }
        }
        private TrackableCollection<ScoreType> _scoreTypes;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            KidsUserState = null;
            ScoreTypes.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupKidsUserState(KidsUserState previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Games.Contains(this))
            {
                previousValue.Games.Remove(this);
            }
    
            if (KidsUserState != null)
            {
                if (!KidsUserState.Games.Contains(this))
                {
                    KidsUserState.Games.Add(this);
                }
    
                UserStateRequired = KidsUserState.Id;
            }
            else if (!skipKeys)
            {
                UserStateRequired = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("KidsUserState")
                    && (ChangeTracker.OriginalValues["KidsUserState"] == KidsUserState))
                {
                    ChangeTracker.OriginalValues.Remove("KidsUserState");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("KidsUserState", previousValue);
                }
                if (KidsUserState != null && !KidsUserState.ChangeTracker.ChangeTrackingEnabled)
                {
                    KidsUserState.StartTracking();
                }
            }
        }
    
        private void FixupScoreTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ScoreType item in e.NewItems)
                {
                    if (!item.Games.Contains(this))
                    {
                        item.Games.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ScoreTypes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ScoreType item in e.OldItems)
                {
                    if (item.Games.Contains(this))
                    {
                        item.Games.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ScoreTypes", item);
                    }
                }
            }
        }

        #endregion
    }
}

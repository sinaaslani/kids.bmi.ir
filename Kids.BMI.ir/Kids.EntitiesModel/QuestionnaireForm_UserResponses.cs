//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(QuestionnaireForm_Questions))]
    [KnownType(typeof(QuestionnaireForm))]
    [KnownType(typeof(QuestionnaireForms_ResponseItems))]
    public partial class QuestionnaireForm_UserResponses: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long Serial
        {
            get { return _serial; }
            set
            {
                if (_serial != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Serial' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _serial = value;
                    OnPropertyChanged("Serial");
                }
            }
        }
        private long _serial;
    
        [DataMember]
        public long UserRandomId
        {
            get { return _userRandomId; }
            set
            {
                if (_userRandomId != value)
                {
                    _userRandomId = value;
                    OnPropertyChanged("UserRandomId");
                }
            }
        }
        private long _userRandomId;
    
        [DataMember]
        public long FormId
        {
            get { return _formId; }
            set
            {
                if (_formId != value)
                {
                    ChangeTracker.RecordOriginalValue("FormId", _formId);
                    if (!IsDeserializing)
                    {
                        if (QuestionnaireForm != null && QuestionnaireForm.FormId != value)
                        {
                            QuestionnaireForm = null;
                        }
                    }
                    _formId = value;
                    OnPropertyChanged("FormId");
                }
            }
        }
        private long _formId;
    
        [DataMember]
        public long QuestionId
        {
            get { return _questionId; }
            set
            {
                if (_questionId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuestionId", _questionId);
                    if (!IsDeserializing)
                    {
                        if (QuestionnaireForm_Questions != null && QuestionnaireForm_Questions.QuestionId != value)
                        {
                            QuestionnaireForm_Questions = null;
                        }
                    }
                    _questionId = value;
                    OnPropertyChanged("QuestionId");
                }
            }
        }
        private long _questionId;
    
        [DataMember]
        public long ItemId
        {
            get { return _itemId; }
            set
            {
                if (_itemId != value)
                {
                    ChangeTracker.RecordOriginalValue("ItemId", _itemId);
                    if (!IsDeserializing)
                    {
                        if (QuestionnaireForms_ResponseItems != null && QuestionnaireForms_ResponseItems.ItemId != value)
                        {
                            QuestionnaireForms_ResponseItems = null;
                        }
                    }
                    _itemId = value;
                    OnPropertyChanged("ItemId");
                }
            }
        }
        private long _itemId;
    
        [DataMember]
        public string ItemValue
        {
            get { return _itemValue; }
            set
            {
                if (_itemValue != value)
                {
                    _itemValue = value;
                    OnPropertyChanged("ItemValue");
                }
            }
        }
        private string _itemValue;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public QuestionnaireForm_Questions QuestionnaireForm_Questions
        {
            get { return _questionnaireForm_Questions; }
            set
            {
                if (!ReferenceEquals(_questionnaireForm_Questions, value))
                {
                    var previousValue = _questionnaireForm_Questions;
                    _questionnaireForm_Questions = value;
                    FixupQuestionnaireForm_Questions(previousValue);
                    OnNavigationPropertyChanged("QuestionnaireForm_Questions");
                }
            }
        }
        private QuestionnaireForm_Questions _questionnaireForm_Questions;
    
        [DataMember]
        public QuestionnaireForm QuestionnaireForm
        {
            get { return _questionnaireForm; }
            set
            {
                if (!ReferenceEquals(_questionnaireForm, value))
                {
                    var previousValue = _questionnaireForm;
                    _questionnaireForm = value;
                    FixupQuestionnaireForm(previousValue);
                    OnNavigationPropertyChanged("QuestionnaireForm");
                }
            }
        }
        private QuestionnaireForm _questionnaireForm;
    
        [DataMember]
        public QuestionnaireForms_ResponseItems QuestionnaireForms_ResponseItems
        {
            get { return _questionnaireForms_ResponseItems; }
            set
            {
                if (!ReferenceEquals(_questionnaireForms_ResponseItems, value))
                {
                    var previousValue = _questionnaireForms_ResponseItems;
                    _questionnaireForms_ResponseItems = value;
                    FixupQuestionnaireForms_ResponseItems(previousValue);
                    OnNavigationPropertyChanged("QuestionnaireForms_ResponseItems");
                }
            }
        }
        private QuestionnaireForms_ResponseItems _questionnaireForms_ResponseItems;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            QuestionnaireForm_Questions = null;
            QuestionnaireForm = null;
            QuestionnaireForms_ResponseItems = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupQuestionnaireForm_Questions(QuestionnaireForm_Questions previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.QuestionnaireForm_UserResponses.Contains(this))
            {
                previousValue.QuestionnaireForm_UserResponses.Remove(this);
            }
    
            if (QuestionnaireForm_Questions != null)
            {
                if (!QuestionnaireForm_Questions.QuestionnaireForm_UserResponses.Contains(this))
                {
                    QuestionnaireForm_Questions.QuestionnaireForm_UserResponses.Add(this);
                }
    
                QuestionId = QuestionnaireForm_Questions.QuestionId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("QuestionnaireForm_Questions")
                    && (ChangeTracker.OriginalValues["QuestionnaireForm_Questions"] == QuestionnaireForm_Questions))
                {
                    ChangeTracker.OriginalValues.Remove("QuestionnaireForm_Questions");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("QuestionnaireForm_Questions", previousValue);
                }
                if (QuestionnaireForm_Questions != null && !QuestionnaireForm_Questions.ChangeTracker.ChangeTrackingEnabled)
                {
                    QuestionnaireForm_Questions.StartTracking();
                }
            }
        }
    
        private void FixupQuestionnaireForm(QuestionnaireForm previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.QuestionnaireForm_UserResponses.Contains(this))
            {
                previousValue.QuestionnaireForm_UserResponses.Remove(this);
            }
    
            if (QuestionnaireForm != null)
            {
                if (!QuestionnaireForm.QuestionnaireForm_UserResponses.Contains(this))
                {
                    QuestionnaireForm.QuestionnaireForm_UserResponses.Add(this);
                }
    
                FormId = QuestionnaireForm.FormId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("QuestionnaireForm")
                    && (ChangeTracker.OriginalValues["QuestionnaireForm"] == QuestionnaireForm))
                {
                    ChangeTracker.OriginalValues.Remove("QuestionnaireForm");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("QuestionnaireForm", previousValue);
                }
                if (QuestionnaireForm != null && !QuestionnaireForm.ChangeTracker.ChangeTrackingEnabled)
                {
                    QuestionnaireForm.StartTracking();
                }
            }
        }
    
        private void FixupQuestionnaireForms_ResponseItems(QuestionnaireForms_ResponseItems previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.QuestionnaireForm_UserResponses.Contains(this))
            {
                previousValue.QuestionnaireForm_UserResponses.Remove(this);
            }
    
            if (QuestionnaireForms_ResponseItems != null)
            {
                if (!QuestionnaireForms_ResponseItems.QuestionnaireForm_UserResponses.Contains(this))
                {
                    QuestionnaireForms_ResponseItems.QuestionnaireForm_UserResponses.Add(this);
                }
    
                ItemId = QuestionnaireForms_ResponseItems.ItemId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("QuestionnaireForms_ResponseItems")
                    && (ChangeTracker.OriginalValues["QuestionnaireForms_ResponseItems"] == QuestionnaireForms_ResponseItems))
                {
                    ChangeTracker.OriginalValues.Remove("QuestionnaireForms_ResponseItems");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("QuestionnaireForms_ResponseItems", previousValue);
                }
                if (QuestionnaireForms_ResponseItems != null && !QuestionnaireForms_ResponseItems.ChangeTracker.ChangeTrackingEnabled)
                {
                    QuestionnaireForms_ResponseItems.StartTracking();
                }
            }
        }

        #endregion
    }
}

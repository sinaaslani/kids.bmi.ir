//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(KidsUser))]
    [KnownType(typeof(PollQuestion))]
    [KnownType(typeof(PollResponseItem))]
    public partial class PollUserResponse: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid Serial
        {
            get { return _serial; }
            set
            {
                if (_serial != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Serial' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _serial = value;
                    OnPropertyChanged("Serial");
                }
            }
        }
        private System.Guid _serial;
    
        [DataMember]
        public long QuestionId
        {
            get { return _questionId; }
            set
            {
                if (_questionId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuestionId", _questionId);
                    if (!IsDeserializing)
                    {
                        if (PollQuestion != null && PollQuestion.QuestionId != value)
                        {
                            PollQuestion = null;
                        }
                    }
                    _questionId = value;
                    OnPropertyChanged("QuestionId");
                }
            }
        }
        private long _questionId;
    
        [DataMember]
        public string UserIp
        {
            get { return _userIp; }
            set
            {
                if (_userIp != value)
                {
                    _userIp = value;
                    OnPropertyChanged("UserIp");
                }
            }
        }
        private string _userIp;
    
        [DataMember]
        public long ResponseItemId
        {
            get { return _responseItemId; }
            set
            {
                if (_responseItemId != value)
                {
                    ChangeTracker.RecordOriginalValue("ResponseItemId", _responseItemId);
                    if (!IsDeserializing)
                    {
                        if (PollResponseItem != null && PollResponseItem.ItemId != value)
                        {
                            PollResponseItem = null;
                        }
                    }
                    _responseItemId = value;
                    OnPropertyChanged("ResponseItemId");
                }
            }
        }
        private long _responseItemId;
    
        [DataMember]
        public Nullable<long> KidsUserId
        {
            get { return _kidsUserId; }
            set
            {
                if (_kidsUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("KidsUserId", _kidsUserId);
                    if (!IsDeserializing)
                    {
                        if (KidsUser != null && KidsUser.KidsUserId != value)
                        {
                            KidsUser = null;
                        }
                    }
                    _kidsUserId = value;
                    OnPropertyChanged("KidsUserId");
                }
            }
        }
        private Nullable<long> _kidsUserId;
    
        [DataMember]
        public System.DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set
            {
                if (_createDateTime != value)
                {
                    _createDateTime = value;
                    OnPropertyChanged("CreateDateTime");
                }
            }
        }
        private System.DateTime _createDateTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public KidsUser KidsUser
        {
            get { return _kidsUser; }
            set
            {
                if (!ReferenceEquals(_kidsUser, value))
                {
                    var previousValue = _kidsUser;
                    _kidsUser = value;
                    FixupKidsUser(previousValue);
                    OnNavigationPropertyChanged("KidsUser");
                }
            }
        }
        private KidsUser _kidsUser;
    
        [DataMember]
        public PollQuestion PollQuestion
        {
            get { return _pollQuestion; }
            set
            {
                if (!ReferenceEquals(_pollQuestion, value))
                {
                    var previousValue = _pollQuestion;
                    _pollQuestion = value;
                    FixupPollQuestion(previousValue);
                    OnNavigationPropertyChanged("PollQuestion");
                }
            }
        }
        private PollQuestion _pollQuestion;
    
        [DataMember]
        public PollResponseItem PollResponseItem
        {
            get { return _pollResponseItem; }
            set
            {
                if (!ReferenceEquals(_pollResponseItem, value))
                {
                    var previousValue = _pollResponseItem;
                    _pollResponseItem = value;
                    FixupPollResponseItem(previousValue);
                    OnNavigationPropertyChanged("PollResponseItem");
                }
            }
        }
        private PollResponseItem _pollResponseItem;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            KidsUser = null;
            PollQuestion = null;
            PollResponseItem = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupKidsUser(KidsUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PollUserResponses.Contains(this))
            {
                previousValue.PollUserResponses.Remove(this);
            }
    
            if (KidsUser != null)
            {
                if (!KidsUser.PollUserResponses.Contains(this))
                {
                    KidsUser.PollUserResponses.Add(this);
                }
    
                KidsUserId = KidsUser.KidsUserId;
            }
            else if (!skipKeys)
            {
                KidsUserId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("KidsUser")
                    && (ChangeTracker.OriginalValues["KidsUser"] == KidsUser))
                {
                    ChangeTracker.OriginalValues.Remove("KidsUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("KidsUser", previousValue);
                }
                if (KidsUser != null && !KidsUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    KidsUser.StartTracking();
                }
            }
        }
    
        private void FixupPollQuestion(PollQuestion previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PollUserResponses.Contains(this))
            {
                previousValue.PollUserResponses.Remove(this);
            }
    
            if (PollQuestion != null)
            {
                if (!PollQuestion.PollUserResponses.Contains(this))
                {
                    PollQuestion.PollUserResponses.Add(this);
                }
    
                QuestionId = PollQuestion.QuestionId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PollQuestion")
                    && (ChangeTracker.OriginalValues["PollQuestion"] == PollQuestion))
                {
                    ChangeTracker.OriginalValues.Remove("PollQuestion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PollQuestion", previousValue);
                }
                if (PollQuestion != null && !PollQuestion.ChangeTracker.ChangeTrackingEnabled)
                {
                    PollQuestion.StartTracking();
                }
            }
        }
    
        private void FixupPollResponseItem(PollResponseItem previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PollUserResponses.Contains(this))
            {
                previousValue.PollUserResponses.Remove(this);
            }
    
            if (PollResponseItem != null)
            {
                if (!PollResponseItem.PollUserResponses.Contains(this))
                {
                    PollResponseItem.PollUserResponses.Add(this);
                }
    
                ResponseItemId = PollResponseItem.ItemId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PollResponseItem")
                    && (ChangeTracker.OriginalValues["PollResponseItem"] == PollResponseItem))
                {
                    ChangeTracker.OriginalValues.Remove("PollResponseItem");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PollResponseItem", previousValue);
                }
                if (PollResponseItem != null && !PollResponseItem.ChangeTracker.ChangeTrackingEnabled)
                {
                    PollResponseItem.StartTracking();
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Festival_Pictures))]
    public partial class Festival: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int FestivalId
        {
            get { return _festivalId; }
            set
            {
                if (_festivalId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FestivalId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _festivalId = value;
                    OnPropertyChanged("FestivalId");
                }
            }
        }
        private int _festivalId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public System.DateTime FromDate
        {
            get { return _fromDate; }
            set
            {
                if (_fromDate != value)
                {
                    _fromDate = value;
                    OnPropertyChanged("FromDate");
                }
            }
        }
        private System.DateTime _fromDate;
    
        [DataMember]
        public System.DateTime ToDate
        {
            get { return _toDate; }
            set
            {
                if (_toDate != value)
                {
                    _toDate = value;
                    OnPropertyChanged("ToDate");
                }
            }
        }
        private System.DateTime _toDate;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public int PictureShowCount
        {
            get { return _pictureShowCount; }
            set
            {
                if (_pictureShowCount != value)
                {
                    _pictureShowCount = value;
                    OnPropertyChanged("PictureShowCount");
                }
            }
        }
        private int _pictureShowCount;
    
        [DataMember]
        public string FestivalThumbPic
        {
            get { return _festivalThumbPic; }
            set
            {
                if (_festivalThumbPic != value)
                {
                    _festivalThumbPic = value;
                    OnPropertyChanged("FestivalThumbPic");
                }
            }
        }
        private string _festivalThumbPic;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Festival_Pictures> Festival_Pictures
        {
            get
            {
                if (_festival_Pictures == null)
                {
                    _festival_Pictures = new TrackableCollection<Festival_Pictures>();
                    _festival_Pictures.CollectionChanged += FixupFestival_Pictures;
                }
                return _festival_Pictures;
            }
            set
            {
                if (!ReferenceEquals(_festival_Pictures, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_festival_Pictures != null)
                    {
                        _festival_Pictures.CollectionChanged -= FixupFestival_Pictures;
                    }
                    _festival_Pictures = value;
                    if (_festival_Pictures != null)
                    {
                        _festival_Pictures.CollectionChanged += FixupFestival_Pictures;
                    }
                    OnNavigationPropertyChanged("Festival_Pictures");
                }
            }
        }
        private TrackableCollection<Festival_Pictures> _festival_Pictures;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Festival_Pictures.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupFestival_Pictures(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Festival_Pictures item in e.NewItems)
                {
                    item.Festival = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Festival_Pictures", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Festival_Pictures item in e.OldItems)
                {
                    if (ReferenceEquals(item.Festival, this))
                    {
                        item.Festival = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Festival_Pictures", item);
                    }
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PollQuestion))]
    [KnownType(typeof(PollUserResponse))]
    public partial class PollResponseItem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long ItemId
        {
            get { return _itemId; }
            set
            {
                if (_itemId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ItemId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _itemId = value;
                    OnPropertyChanged("ItemId");
                }
            }
        }
        private long _itemId;
    
        [DataMember]
        public long PollQuestionsId
        {
            get { return _pollQuestionsId; }
            set
            {
                if (_pollQuestionsId != value)
                {
                    ChangeTracker.RecordOriginalValue("PollQuestionsId", _pollQuestionsId);
                    if (!IsDeserializing)
                    {
                        if (PollQuestion != null && PollQuestion.QuestionId != value)
                        {
                            PollQuestion = null;
                        }
                    }
                    _pollQuestionsId = value;
                    OnPropertyChanged("PollQuestionsId");
                }
            }
        }
        private long _pollQuestionsId;
    
        [DataMember]
        public string ItemText
        {
            get { return _itemText; }
            set
            {
                if (_itemText != value)
                {
                    _itemText = value;
                    OnPropertyChanged("ItemText");
                }
            }
        }
        private string _itemText;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public PollQuestion PollQuestion
        {
            get { return _pollQuestion; }
            set
            {
                if (!ReferenceEquals(_pollQuestion, value))
                {
                    var previousValue = _pollQuestion;
                    _pollQuestion = value;
                    FixupPollQuestion(previousValue);
                    OnNavigationPropertyChanged("PollQuestion");
                }
            }
        }
        private PollQuestion _pollQuestion;
    
        [DataMember]
        public TrackableCollection<PollUserResponse> PollUserResponses
        {
            get
            {
                if (_pollUserResponses == null)
                {
                    _pollUserResponses = new TrackableCollection<PollUserResponse>();
                    _pollUserResponses.CollectionChanged += FixupPollUserResponses;
                }
                return _pollUserResponses;
            }
            set
            {
                if (!ReferenceEquals(_pollUserResponses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pollUserResponses != null)
                    {
                        _pollUserResponses.CollectionChanged -= FixupPollUserResponses;
                    }
                    _pollUserResponses = value;
                    if (_pollUserResponses != null)
                    {
                        _pollUserResponses.CollectionChanged += FixupPollUserResponses;
                    }
                    OnNavigationPropertyChanged("PollUserResponses");
                }
            }
        }
        private TrackableCollection<PollUserResponse> _pollUserResponses;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PollQuestion = null;
            PollUserResponses.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupPollQuestion(PollQuestion previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PollResponseItems.Contains(this))
            {
                previousValue.PollResponseItems.Remove(this);
            }
    
            if (PollQuestion != null)
            {
                if (!PollQuestion.PollResponseItems.Contains(this))
                {
                    PollQuestion.PollResponseItems.Add(this);
                }
    
                PollQuestionsId = PollQuestion.QuestionId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PollQuestion")
                    && (ChangeTracker.OriginalValues["PollQuestion"] == PollQuestion))
                {
                    ChangeTracker.OriginalValues.Remove("PollQuestion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PollQuestion", previousValue);
                }
                if (PollQuestion != null && !PollQuestion.ChangeTracker.ChangeTrackingEnabled)
                {
                    PollQuestion.StartTracking();
                }
            }
        }
    
        private void FixupPollUserResponses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PollUserResponse item in e.NewItems)
                {
                    item.PollResponseItem = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PollUserResponses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PollUserResponse item in e.OldItems)
                {
                    if (ReferenceEquals(item.PollResponseItem, this))
                    {
                        item.PollResponseItem = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PollUserResponses", item);
                    }
                }
            }
        }

        #endregion
    }
}

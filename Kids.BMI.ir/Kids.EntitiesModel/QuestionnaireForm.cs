//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(QuestionnaireForm_Questions))]
    [KnownType(typeof(QuestionnaireForm_UserResponses))]
    public partial class QuestionnaireForm: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long FormId
        {
            get { return _formId; }
            set
            {
                if (_formId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FormId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _formId = value;
                    OnPropertyChanged("FormId");
                }
            }
        }
        private long _formId;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string Introduction
        {
            get { return _introduction; }
            set
            {
                if (_introduction != value)
                {
                    _introduction = value;
                    OnPropertyChanged("Introduction");
                }
            }
        }
        private string _introduction;
    
        [DataMember]
        public System.DateTime FormDate
        {
            get { return _formDate; }
            set
            {
                if (_formDate != value)
                {
                    _formDate = value;
                    OnPropertyChanged("FormDate");
                }
            }
        }
        private System.DateTime _formDate;
    
        [DataMember]
        public int SortOrderId
        {
            get { return _sortOrderId; }
            set
            {
                if (_sortOrderId != value)
                {
                    _sortOrderId = value;
                    OnPropertyChanged("SortOrderId");
                }
            }
        }
        private int _sortOrderId;
    
        [DataMember]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<QuestionnaireForm_Questions> QuestionnaireForm_Questions
        {
            get
            {
                if (_questionnaireForm_Questions == null)
                {
                    _questionnaireForm_Questions = new TrackableCollection<QuestionnaireForm_Questions>();
                    _questionnaireForm_Questions.CollectionChanged += FixupQuestionnaireForm_Questions;
                }
                return _questionnaireForm_Questions;
            }
            set
            {
                if (!ReferenceEquals(_questionnaireForm_Questions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_questionnaireForm_Questions != null)
                    {
                        _questionnaireForm_Questions.CollectionChanged -= FixupQuestionnaireForm_Questions;
                    }
                    _questionnaireForm_Questions = value;
                    if (_questionnaireForm_Questions != null)
                    {
                        _questionnaireForm_Questions.CollectionChanged += FixupQuestionnaireForm_Questions;
                    }
                    OnNavigationPropertyChanged("QuestionnaireForm_Questions");
                }
            }
        }
        private TrackableCollection<QuestionnaireForm_Questions> _questionnaireForm_Questions;
    
        [DataMember]
        public TrackableCollection<QuestionnaireForm_UserResponses> QuestionnaireForm_UserResponses
        {
            get
            {
                if (_questionnaireForm_UserResponses == null)
                {
                    _questionnaireForm_UserResponses = new TrackableCollection<QuestionnaireForm_UserResponses>();
                    _questionnaireForm_UserResponses.CollectionChanged += FixupQuestionnaireForm_UserResponses;
                }
                return _questionnaireForm_UserResponses;
            }
            set
            {
                if (!ReferenceEquals(_questionnaireForm_UserResponses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_questionnaireForm_UserResponses != null)
                    {
                        _questionnaireForm_UserResponses.CollectionChanged -= FixupQuestionnaireForm_UserResponses;
                    }
                    _questionnaireForm_UserResponses = value;
                    if (_questionnaireForm_UserResponses != null)
                    {
                        _questionnaireForm_UserResponses.CollectionChanged += FixupQuestionnaireForm_UserResponses;
                    }
                    OnNavigationPropertyChanged("QuestionnaireForm_UserResponses");
                }
            }
        }
        private TrackableCollection<QuestionnaireForm_UserResponses> _questionnaireForm_UserResponses;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            QuestionnaireForm_Questions.Clear();
            QuestionnaireForm_UserResponses.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupQuestionnaireForm_Questions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (QuestionnaireForm_Questions item in e.NewItems)
                {
                    item.QuestionnaireForm = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("QuestionnaireForm_Questions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (QuestionnaireForm_Questions item in e.OldItems)
                {
                    if (ReferenceEquals(item.QuestionnaireForm, this))
                    {
                        item.QuestionnaireForm = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("QuestionnaireForm_Questions", item);
                    }
                }
            }
        }
    
        private void FixupQuestionnaireForm_UserResponses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (QuestionnaireForm_UserResponses item in e.NewItems)
                {
                    item.QuestionnaireForm = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("QuestionnaireForm_UserResponses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (QuestionnaireForm_UserResponses item in e.OldItems)
                {
                    if (ReferenceEquals(item.QuestionnaireForm, this))
                    {
                        item.QuestionnaireForm = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("QuestionnaireForm_UserResponses", item);
                    }
                }
            }
        }

        #endregion
    }
}

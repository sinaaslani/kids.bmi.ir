//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BankStoryExam))]
    public partial class BankStoryExam_Question: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int QuestionId
        {
            get { return _questionId; }
            set
            {
                if (_questionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'QuestionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _questionId = value;
                    OnPropertyChanged("QuestionId");
                }
            }
        }
        private int _questionId;
    
        [DataMember]
        public int ExamId
        {
            get { return _examId; }
            set
            {
                if (_examId != value)
                {
                    ChangeTracker.RecordOriginalValue("ExamId", _examId);
                    if (!IsDeserializing)
                    {
                        if (BankStoryExam != null && BankStoryExam.ExamId != value)
                        {
                            BankStoryExam = null;
                        }
                    }
                    _examId = value;
                    OnPropertyChanged("ExamId");
                }
            }
        }
        private int _examId;
    
        [DataMember]
        public string QuestionBody
        {
            get { return _questionBody; }
            set
            {
                if (_questionBody != value)
                {
                    _questionBody = value;
                    OnPropertyChanged("QuestionBody");
                }
            }
        }
        private string _questionBody;
    
        [DataMember]
        public string AnswerA
        {
            get { return _answerA; }
            set
            {
                if (_answerA != value)
                {
                    _answerA = value;
                    OnPropertyChanged("AnswerA");
                }
            }
        }
        private string _answerA;
    
        [DataMember]
        public string AnswerB
        {
            get { return _answerB; }
            set
            {
                if (_answerB != value)
                {
                    _answerB = value;
                    OnPropertyChanged("AnswerB");
                }
            }
        }
        private string _answerB;
    
        [DataMember]
        public string AnswerC
        {
            get { return _answerC; }
            set
            {
                if (_answerC != value)
                {
                    _answerC = value;
                    OnPropertyChanged("AnswerC");
                }
            }
        }
        private string _answerC;
    
        [DataMember]
        public string AnswerD
        {
            get { return _answerD; }
            set
            {
                if (_answerD != value)
                {
                    _answerD = value;
                    OnPropertyChanged("AnswerD");
                }
            }
        }
        private string _answerD;
    
        [DataMember]
        public int Answer
        {
            get { return _answer; }
            set
            {
                if (_answer != value)
                {
                    _answer = value;
                    OnPropertyChanged("Answer");
                }
            }
        }
        private int _answer;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public BankStoryExam BankStoryExam
        {
            get { return _bankStoryExam; }
            set
            {
                if (!ReferenceEquals(_bankStoryExam, value))
                {
                    var previousValue = _bankStoryExam;
                    _bankStoryExam = value;
                    FixupBankStoryExam(previousValue);
                    OnNavigationPropertyChanged("BankStoryExam");
                }
            }
        }
        private BankStoryExam _bankStoryExam;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            BankStoryExam = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupBankStoryExam(BankStoryExam previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BankStoryExam_Question.Contains(this))
            {
                previousValue.BankStoryExam_Question.Remove(this);
            }
    
            if (BankStoryExam != null)
            {
                if (!BankStoryExam.BankStoryExam_Question.Contains(this))
                {
                    BankStoryExam.BankStoryExam_Question.Add(this);
                }
    
                ExamId = BankStoryExam.ExamId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BankStoryExam")
                    && (ChangeTracker.OriginalValues["BankStoryExam"] == BankStoryExam))
                {
                    ChangeTracker.OriginalValues.Remove("BankStoryExam");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BankStoryExam", previousValue);
                }
                if (BankStoryExam != null && !BankStoryExam.ChangeTracker.ChangeTrackingEnabled)
                {
                    BankStoryExam.StartTracking();
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Festival))]
    [KnownType(typeof(KidsUser))]
    [KnownType(typeof(Festival_Pictures_Poll))]
    public partial class Festival_Pictures: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PicId
        {
            get { return _picId; }
            set
            {
                if (_picId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PicId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _picId = value;
                    OnPropertyChanged("PicId");
                }
            }
        }
        private int _picId;
    
        [DataMember]
        public int FestivalId
        {
            get { return _festivalId; }
            set
            {
                if (_festivalId != value)
                {
                    ChangeTracker.RecordOriginalValue("FestivalId", _festivalId);
                    if (!IsDeserializing)
                    {
                        if (Festival != null && Festival.FestivalId != value)
                        {
                            Festival = null;
                        }
                    }
                    _festivalId = value;
                    OnPropertyChanged("FestivalId");
                }
            }
        }
        private int _festivalId;
    
        [DataMember]
        public long SenderKidsUserId
        {
            get { return _senderKidsUserId; }
            set
            {
                if (_senderKidsUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("SenderKidsUserId", _senderKidsUserId);
                    if (!IsDeserializing)
                    {
                        if (KidsUser != null && KidsUser.KidsUserId != value)
                        {
                            KidsUser = null;
                        }
                    }
                    _senderKidsUserId = value;
                    OnPropertyChanged("SenderKidsUserId");
                }
            }
        }
        private long _senderKidsUserId;
    
        [DataMember]
        public string PicAddress
        {
            get { return _picAddress; }
            set
            {
                if (_picAddress != value)
                {
                    _picAddress = value;
                    OnPropertyChanged("PicAddress");
                }
            }
        }
        private string _picAddress;
    
        [DataMember]
        public string PicDescription
        {
            get { return _picDescription; }
            set
            {
                if (_picDescription != value)
                {
                    _picDescription = value;
                    OnPropertyChanged("PicDescription");
                }
            }
        }
        private string _picDescription;
    
        [DataMember]
        public bool IsApproved
        {
            get { return _isApproved; }
            set
            {
                if (_isApproved != value)
                {
                    _isApproved = value;
                    OnPropertyChanged("IsApproved");
                }
            }
        }
        private bool _isApproved;
    
        [DataMember]
        public System.DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set
            {
                if (_createDateTime != value)
                {
                    _createDateTime = value;
                    OnPropertyChanged("CreateDateTime");
                }
            }
        }
        private System.DateTime _createDateTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Festival Festival
        {
            get { return _festival; }
            set
            {
                if (!ReferenceEquals(_festival, value))
                {
                    var previousValue = _festival;
                    _festival = value;
                    FixupFestival(previousValue);
                    OnNavigationPropertyChanged("Festival");
                }
            }
        }
        private Festival _festival;
    
        [DataMember]
        public KidsUser KidsUser
        {
            get { return _kidsUser; }
            set
            {
                if (!ReferenceEquals(_kidsUser, value))
                {
                    var previousValue = _kidsUser;
                    _kidsUser = value;
                    FixupKidsUser(previousValue);
                    OnNavigationPropertyChanged("KidsUser");
                }
            }
        }
        private KidsUser _kidsUser;
    
        [DataMember]
        public TrackableCollection<Festival_Pictures_Poll> Festival_Pictures_Poll
        {
            get
            {
                if (_festival_Pictures_Poll == null)
                {
                    _festival_Pictures_Poll = new TrackableCollection<Festival_Pictures_Poll>();
                    _festival_Pictures_Poll.CollectionChanged += FixupFestival_Pictures_Poll;
                }
                return _festival_Pictures_Poll;
            }
            set
            {
                if (!ReferenceEquals(_festival_Pictures_Poll, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_festival_Pictures_Poll != null)
                    {
                        _festival_Pictures_Poll.CollectionChanged -= FixupFestival_Pictures_Poll;
                    }
                    _festival_Pictures_Poll = value;
                    if (_festival_Pictures_Poll != null)
                    {
                        _festival_Pictures_Poll.CollectionChanged += FixupFestival_Pictures_Poll;
                    }
                    OnNavigationPropertyChanged("Festival_Pictures_Poll");
                }
            }
        }
        private TrackableCollection<Festival_Pictures_Poll> _festival_Pictures_Poll;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Festival = null;
            KidsUser = null;
            Festival_Pictures_Poll.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupFestival(Festival previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Festival_Pictures.Contains(this))
            {
                previousValue.Festival_Pictures.Remove(this);
            }
    
            if (Festival != null)
            {
                if (!Festival.Festival_Pictures.Contains(this))
                {
                    Festival.Festival_Pictures.Add(this);
                }
    
                FestivalId = Festival.FestivalId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Festival")
                    && (ChangeTracker.OriginalValues["Festival"] == Festival))
                {
                    ChangeTracker.OriginalValues.Remove("Festival");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Festival", previousValue);
                }
                if (Festival != null && !Festival.ChangeTracker.ChangeTrackingEnabled)
                {
                    Festival.StartTracking();
                }
            }
        }
    
        private void FixupKidsUser(KidsUser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Festival_Pictures.Contains(this))
            {
                previousValue.Festival_Pictures.Remove(this);
            }
    
            if (KidsUser != null)
            {
                if (!KidsUser.Festival_Pictures.Contains(this))
                {
                    KidsUser.Festival_Pictures.Add(this);
                }
    
                SenderKidsUserId = KidsUser.KidsUserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("KidsUser")
                    && (ChangeTracker.OriginalValues["KidsUser"] == KidsUser))
                {
                    ChangeTracker.OriginalValues.Remove("KidsUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("KidsUser", previousValue);
                }
                if (KidsUser != null && !KidsUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    KidsUser.StartTracking();
                }
            }
        }
    
        private void FixupFestival_Pictures_Poll(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Festival_Pictures_Poll item in e.NewItems)
                {
                    item.Festival_Pictures = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Festival_Pictures_Poll", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Festival_Pictures_Poll item in e.OldItems)
                {
                    if (ReferenceEquals(item.Festival_Pictures, this))
                    {
                        item.Festival_Pictures = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Festival_Pictures_Poll", item);
                    }
                }
            }
        }

        #endregion
    }
}

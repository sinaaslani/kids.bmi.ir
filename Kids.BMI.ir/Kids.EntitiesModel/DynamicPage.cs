//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DynamicPageType))]
    [KnownType(typeof(DynamicPage))]
    public partial class DynamicPage: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string Body
        {
            get { return _body; }
            set
            {
                if (_body != value)
                {
                    _body = value;
                    OnPropertyChanged("Body");
                }
            }
        }
        private string _body;
    
        [DataMember]
        public string PageName
        {
            get { return _pageName; }
            set
            {
                if (_pageName != value)
                {
                    _pageName = value;
                    OnPropertyChanged("PageName");
                }
            }
        }
        private string _pageName;
    
        [DataMember]
        public int PageId
        {
            get { return _pageId; }
            set
            {
                if (_pageId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PageId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pageId = value;
                    OnPropertyChanged("PageId");
                }
            }
        }
        private int _pageId;
    
        [DataMember]
        public System.DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set
            {
                if (_createDateTime != value)
                {
                    _createDateTime = value;
                    OnPropertyChanged("CreateDateTime");
                }
            }
        }
        private System.DateTime _createDateTime;
    
        [DataMember]
        public int PageTypeId
        {
            get { return _pageTypeId; }
            set
            {
                if (_pageTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("PageTypeId", _pageTypeId);
                    if (!IsDeserializing)
                    {
                        if (DynamicPageType != null && DynamicPageType.PageTypeId != value)
                        {
                            DynamicPageType = null;
                        }
                    }
                    _pageTypeId = value;
                    OnPropertyChanged("PageTypeId");
                }
            }
        }
        private int _pageTypeId;
    
        [DataMember]
        public Nullable<int> ParentPageId
        {
            get { return _parentPageId; }
            set
            {
                if (_parentPageId != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentPageId", _parentPageId);
                    if (!IsDeserializing)
                    {
                        if (ParentDynamicPage != null && ParentDynamicPage.PageId != value)
                        {
                            ParentDynamicPage = null;
                        }
                    }
                    _parentPageId = value;
                    OnPropertyChanged("ParentPageId");
                }
            }
        }
        private Nullable<int> _parentPageId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public DynamicPageType DynamicPageType
        {
            get { return _dynamicPageType; }
            set
            {
                if (!ReferenceEquals(_dynamicPageType, value))
                {
                    var previousValue = _dynamicPageType;
                    _dynamicPageType = value;
                    FixupDynamicPageType(previousValue);
                    OnNavigationPropertyChanged("DynamicPageType");
                }
            }
        }
        private DynamicPageType _dynamicPageType;
    
        [DataMember]
        public TrackableCollection<DynamicPage> ChildDynamicPages
        {
            get
            {
                if (_childDynamicPages == null)
                {
                    _childDynamicPages = new TrackableCollection<DynamicPage>();
                    _childDynamicPages.CollectionChanged += FixupChildDynamicPages;
                }
                return _childDynamicPages;
            }
            set
            {
                if (!ReferenceEquals(_childDynamicPages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_childDynamicPages != null)
                    {
                        _childDynamicPages.CollectionChanged -= FixupChildDynamicPages;
                    }
                    _childDynamicPages = value;
                    if (_childDynamicPages != null)
                    {
                        _childDynamicPages.CollectionChanged += FixupChildDynamicPages;
                    }
                    OnNavigationPropertyChanged("ChildDynamicPages");
                }
            }
        }
        private TrackableCollection<DynamicPage> _childDynamicPages;
    
        [DataMember]
        public DynamicPage ParentDynamicPage
        {
            get { return _parentDynamicPage; }
            set
            {
                if (!ReferenceEquals(_parentDynamicPage, value))
                {
                    var previousValue = _parentDynamicPage;
                    _parentDynamicPage = value;
                    FixupParentDynamicPage(previousValue);
                    OnNavigationPropertyChanged("ParentDynamicPage");
                }
            }
        }
        private DynamicPage _parentDynamicPage;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DynamicPageType = null;
            ChildDynamicPages.Clear();
            ParentDynamicPage = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupDynamicPageType(DynamicPageType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (DynamicPageType != null)
            {
                PageTypeId = DynamicPageType.PageTypeId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynamicPageType")
                    && (ChangeTracker.OriginalValues["DynamicPageType"] == DynamicPageType))
                {
                    ChangeTracker.OriginalValues.Remove("DynamicPageType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynamicPageType", previousValue);
                }
                if (DynamicPageType != null && !DynamicPageType.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynamicPageType.StartTracking();
                }
            }
        }
    
        private void FixupParentDynamicPage(DynamicPage previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ChildDynamicPages.Contains(this))
            {
                previousValue.ChildDynamicPages.Remove(this);
            }
    
            if (ParentDynamicPage != null)
            {
                if (!ParentDynamicPage.ChildDynamicPages.Contains(this))
                {
                    ParentDynamicPage.ChildDynamicPages.Add(this);
                }
    
                ParentPageId = ParentDynamicPage.PageId;
            }
            else if (!skipKeys)
            {
                ParentPageId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentDynamicPage")
                    && (ChangeTracker.OriginalValues["ParentDynamicPage"] == ParentDynamicPage))
                {
                    ChangeTracker.OriginalValues.Remove("ParentDynamicPage");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentDynamicPage", previousValue);
                }
                if (ParentDynamicPage != null && !ParentDynamicPage.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentDynamicPage.StartTracking();
                }
            }
        }
    
        private void FixupChildDynamicPages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynamicPage item in e.NewItems)
                {
                    item.ParentDynamicPage = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChildDynamicPages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynamicPage item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentDynamicPage, this))
                    {
                        item.ParentDynamicPage = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChildDynamicPages", item);
                    }
                }
            }
        }

        #endregion
    }
}

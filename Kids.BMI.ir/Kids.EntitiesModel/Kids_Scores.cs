//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kids.EntitiesModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(KidsUser))]
    [KnownType(typeof(ScoreType))]
    public partial class Kids_Scores: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long KidsScoreId
        {
            get { return _kidsScoreId; }
            set
            {
                if (_kidsScoreId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'KidsScoreId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _kidsScoreId = value;
                    OnPropertyChanged("KidsScoreId");
                }
            }
        }
        private long _kidsScoreId;
    
        [DataMember]
        public long KidsUserId
        {
            get { return _kidsUserId; }
            set
            {
                if (_kidsUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("KidsUserId", _kidsUserId);
                    if (!IsDeserializing)
                    {
                        if (KidsUser != null && KidsUser.KidsUserId != value)
                        {
                            KidsUser = null;
                        }
                    }
                    _kidsUserId = value;
                    OnPropertyChanged("KidsUserId");
                }
            }
        }
        private long _kidsUserId;
    
        [DataMember]
        public int ScoreTypeId
        {
            get { return _scoreTypeId; }
            set
            {
                if (_scoreTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ScoreTypeId", _scoreTypeId);
                    if (!IsDeserializing)
                    {
                        if (ScoreType != null && ScoreType.Id != value)
                        {
                            ScoreType = null;
                        }
                    }
                    _scoreTypeId = value;
                    OnPropertyChanged("ScoreTypeId");
                }
            }
        }
        private int _scoreTypeId;
    
        [DataMember]
        public double Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    OnPropertyChanged("Value");
                }
            }
        }
        private double _value;
    
        [DataMember]
        public System.DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set
            {
                if (_createDateTime != value)
                {
                    _createDateTime = value;
                    OnPropertyChanged("CreateDateTime");
                }
            }
        }
        private System.DateTime _createDateTime;
    
        [DataMember]
        public string PersianCreateDateTime
        {
            get { return _persianCreateDateTime; }
            set
            {
                if (_persianCreateDateTime != value)
                {
                    _persianCreateDateTime = value;
                    OnPropertyChanged("PersianCreateDateTime");
                }
            }
        }
        private string _persianCreateDateTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public KidsUser KidsUser
        {
            get { return _kidsUser; }
            set
            {
                if (!ReferenceEquals(_kidsUser, value))
                {
                    var previousValue = _kidsUser;
                    _kidsUser = value;
                    FixupKidsUser(previousValue);
                    OnNavigationPropertyChanged("KidsUser");
                }
            }
        }
        private KidsUser _kidsUser;
    
        [DataMember]
        public ScoreType ScoreType
        {
            get { return _scoreType; }
            set
            {
                if (!ReferenceEquals(_scoreType, value))
                {
                    var previousValue = _scoreType;
                    _scoreType = value;
                    FixupScoreType(previousValue);
                    OnNavigationPropertyChanged("ScoreType");
                }
            }
        }
        private ScoreType _scoreType;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            KidsUser = null;
            ScoreType = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupKidsUser(KidsUser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Kids_Scores.Contains(this))
            {
                previousValue.Kids_Scores.Remove(this);
            }
    
            if (KidsUser != null)
            {
                if (!KidsUser.Kids_Scores.Contains(this))
                {
                    KidsUser.Kids_Scores.Add(this);
                }
    
                KidsUserId = KidsUser.KidsUserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("KidsUser")
                    && (ChangeTracker.OriginalValues["KidsUser"] == KidsUser))
                {
                    ChangeTracker.OriginalValues.Remove("KidsUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("KidsUser", previousValue);
                }
                if (KidsUser != null && !KidsUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    KidsUser.StartTracking();
                }
            }
        }
    
        private void FixupScoreType(ScoreType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ScoreType != null)
            {
                ScoreTypeId = ScoreType.Id;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ScoreType")
                    && (ChangeTracker.OriginalValues["ScoreType"] == ScoreType))
                {
                    ChangeTracker.OriginalValues.Remove("ScoreType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ScoreType", previousValue);
                }
                if (ScoreType != null && !ScoreType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ScoreType.StartTracking();
                }
            }
        }

        #endregion
    }
}
